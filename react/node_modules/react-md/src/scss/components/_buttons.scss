////
/// @group buttons
////

/// Boolean if the flat button styles should be included.
/// @type Boolean
$md-btn-include-flat: true !default;

/// Boolean if the raised button styles should be included.
/// @type Boolean
$md-btn-include-raised: true !default;

/// Boolean if the icon button styles should be included.
/// @type Boolean
$md-btn-include-icon: true !default;

/// Boolean if the floating button styles should be included.
/// @type Boolean
$md-btn-include-floating: true !default;

/// The default z index for fixed floating buttons
/// @type Number
/// @see md-dialog-full-page-z-index
/// @see md-dialog-overlay-z-index
/// @see md-drawer-z-index
/// @see md-menu-z-index
/// @see md-picker-inline-z-index
/// @see md-snackbar-z-index
/// @see md-toolbar-z-index
/// @see md-overlay-z-index
/// @group buttons, z-indexes
$md-btn-fixed-z-index: 10 !default;


/// The height for buttons to make them accessible for touch devices.
/// @type Number
/// @access private;
$md-btn-accessible-height: 48px;

/// The border radius to apply to text buttons.
/// @type Number
$md-btn-text-border-radius: 2px !default;

/// The font size for buttons on mobile devices.
///
/// @see md-btn-text-font-size
/// @type Number
$md-btn-mobile-font-size: 14px !default;

/// The height for button on mobile devices.
///
/// @see md-btn-text-height
/// @type Number
$md-btn-mobile-height: 36px !default;

/// The minimum margin to use for fixed floating buttons on mobile-devices.
///
/// @see md-btn-floating-margin
/// @type Number
$md-btn-mobile-floating-margin: 16px !default;

/// The font size for buttons on desktop screens.
///
/// @see md-btn-text-font-size
/// @type Number
$md-btn-desktop-font-size: 13px !default;

/// The height for buttons on desktop screens.
///
/// @see md-btn-text-height
/// @type Number
$md-btn-desktop-height: 32px !default;

/// The minimum margin to use for fixed floating buttons on desktop screens.
///
/// @see md-btn-floating-margin
/// @type Number
$md-btn-desktop-floating-margin: 24px !default;


/// The too and bottom padding to apply to text buttons.
/// @type Number
$md-btn-tb-padding: 8px !default;

/// The left and right padding to apply to text buttons.
/// @type Number
$md-btn-lr-padding: 16px !default;

/// The min width for a flat or raised button.
/// @type Number
$md-btn-min-width: 88px !default;

/// The default size for a floating button (FAB).
/// @type Number
$md-btn-floating-size: 56px !default;

/// The size for a floating button when using the dense spec for icons.
/// @type Number
$md-btn-floating-dense-size: 48px !default;

/// The mini size for a floating button.
/// @type Number
$md-btn-floating-mini-size: 40px !default;

/// The available floating button fixed positions.
/// @type List
$md-btn-floating-fixed-positions: ('tl' 'tr' 'bl' 'br') !default;

/// The size for an icon button.
/// @type Number
$md-btn-icon-size: $md-font-icon-size * 2 !default;

/// The padding for an icon button.
/// @type Number
$md-btn-icon-padding: $md-btn-icon-size / 4 !default;

/// The size for a icon button when using the dense spec.
/// @type Number
$md-btn-icon-dense-size: $md-font-icon-dense-size * 2 !default;

/// The padding to use for a dense icon button.
/// @type Number
$md-btn-icon-dense-padding: $md-btn-icon-dense-size / 4 !default;

/// The border radius to apply to icon buttons.
/// @type Number
$md-btn-icon-border-radius: 50% !default;

/// The base color to use for default buttons in the light theme.
/// @type Color
$md-btn-light-theme-base-color: #999 !default;

/// The background color to use for default buttons in the light theme.
/// @type Color
$md-btn-light-theme-hover-color: rgba($md-btn-light-theme-base-color, .12) !default;

/// The background color to use for default buttons in the light theme that have been disabled.
/// @type Color
$md-btn-light-theme-disabled-color: rgba($md-btn-light-theme-base-color, .2) !default;

/// The background color to use for default buttons that have been pressed in the light theme.
/// @type Color
$md-btn-light-theme-pressed-color: rgba($md-btn-light-theme-base-color, .4) !default;

/// The base color to use for default buttons in the dark theme.
/// @type Color
$md-btn-dark-theme-base-color: #ccc !default;

/// The hover color to use for default buttons in the dark theme.
/// @type Color
$md-btn-dark-theme-hover-color: rgba($md-btn-dark-theme-base-color, .12) !default;

/// The background color to use for default buttons in the dark theme that have been disabled.
/// @type Color
$md-btn-dark-theme-disabled-color: rgba($md-btn-dark-theme-base-color, .2) !default;

/// The background color to use for default buttons that have been pressed in the dark theme.
/// @type Color
$md-btn-dark-theme-pressed-color: rgba($md-btn-dark-theme-base-color, .25) !default;

/// An optional height to apply to a text button for all screen sizes. This will take precedence over
/// the mobile/desktop variables.
///
/// A side effect of using this variable is that the buttons will *not* be updated on mobile devices
/// to have additional styles to make them accessible for touch users.
///
/// @see md-btn-mobile-height
/// @see md-btn-desktop-height
/// @type Number
$md-btn-text-height: null !default;

/// An optional font size to apply to a text button for all screen sizes. This will take precedence
/// over the mobile/desktop variables.
///
/// @see md-btn-mobile-font-size
/// @see md-btn-desktop-font-size
/// @type Number
$md-btn-text-font-size: null !default;

/// An optional margin to get applied to floating buttons that are fixed on a page for all screen sizes.
/// This will take precedence over the mobile/desktop variables.
///
/// @see md-btn-mobile-floating-margin
/// @see md-btn-desktop-floating-margin
/// @type Number
$md-btn-floating-margin: null !default;



/// Includes the styles for material design buttons. Each button type can optionally
/// be excluded. However, if the `floating` styles are included, the `icon` styles
/// will also be included.
///
/// @example scss - Example Usage SCSS
///   @include react-md-buttons
///
/// @param {Color} primary-color [$md-primary-color] - The primary color to theme the
///     buttons with.
/// @param {Color} secondary-color [$md-secondary-color] - The secondary color to theme
///     the buttons with.
/// @param {Boolean} light-theme [$md-light-theme] - Boolean if the buttons should be styled
///     for the light theme.
/// @param {Boolean} include-media [$md-media-included] - Boolean if the media queries should
///     also be included in this mixin.
/// @param {Boolean} include-flat [$md-btn-include-flat] - Boolean if the flat styles for
///     buttons should be included.
/// @param {Boolean} include-raised [$md-btn-include-raised] - Boolean if the raised styles for
///     buttons should be included.
/// @param {Boolean} include-icon [$md-btn-include-icon] - Boolean if the icon styles for
///     buttons should be included.
/// @param {Boolean} include-floating [$md-btn-include-floating] - Boolean if the floating styles for
///     buttons should be included.
/// @param {Boolean} include-dense-icons [$md-font-icon-include-dense] - Boolean if the dense specs for icons
///     should be included for buttons.
@mixin react-md-buttons(
  $primary-color: $md-primary-color,
  $secondary-color: $md-secondary-color,
  $light-theme: $md-light-theme,
  $include-media: $md-media-included,
  $include-flat: $md-btn-include-flat,
  $include-raised: $md-btn-include-raised,
  $include-icon: $md-btn-include-icon,
  $include-floating: $md-btn-include-floating,
  $include-dense-icons: $md-font-icon-include-dense
) {
  // scss-lint:disable QualifyingElement
  a.md-btn {
    text-decoration: none;
  }

  .md-btn {
    background: transparent;
    border: 0;
    position: relative;
    transition-duration: $md-transition-time;
    transition-property: background, color;

    // Prevents click event from firing when clicking a child
    &[disabled] * {
      pointer-events: none;
    }

    &--tooltip {
      // This is required for IE11, the other browsers appear to do this by default.
      overflow: visible;
    }

    &:focus {
      outline-style: none;
    }

    .md-icon-separator {
      height: 100%;
    }

    .md-icon-text {
      @extend %md-font-medium;
    }
  }

  .md-btn--hover {
    background: if($light-theme, $md-btn-light-theme-hover-color, $md-btn-dark-theme-hover-color);
  }

  .md-btn--color-primary-active {
    background: rgba($primary-color, .12);
  }

  .md-btn--color-secondary-active {
    background: rgba($secondary-color, .12);
  }

  @if $include-flat or $include-raised {
    .md-btn--text {
      border-radius: $md-btn-text-border-radius;
      font-size: $md-btn-text-font-size;
      font-weight: $md-font-medium;
      height: $md-btn-text-height;
      min-width: $md-btn-min-width;
      padding: $md-btn-tb-padding $md-btn-lr-padding;
      text-transform: uppercase;
    }
  }

  @if $include-raised or $include-floating {
    .md-btn--raised {
      @include md-box-shadow(1);

      transition: background $md-transition-time, box-shadow $md-transition-time * 2, color $md-transition-time;
    }

    .md-btn--raised-disabled {
      background: get-color('divider', $light-theme);
    }

    .md-btn--raised-pressed {
      @include md-box-shadow(2);
    }
  }

  @if $include-icon or $include-floating {
    .md-btn--icon {
      border-radius: $md-btn-icon-border-radius;
      color: get-color('icon', $light-theme);
      height: $md-btn-icon-size;
      padding: $md-btn-icon-padding;
      width: $md-btn-icon-size;
    }
  }

  @if $include-floating {
    .md-btn--floating {
      height: $md-btn-floating-size;
      padding: ($md-btn-floating-size - $md-font-icon-size) / 2;
      transition-property: background, box-shadow, color;
      width: $md-btn-floating-size;
    }

    .md-btn--floating-mini {
      height: $md-btn-floating-mini-size;
      padding: ($md-btn-floating-mini-size - $md-font-icon-size) / 2;
      width: $md-btn-floating-mini-size;
    }

    .md-btn--fixed {
      position: fixed;
      z-index: $md-btn-fixed-z-index;
    }

    @if $md-btn-floating-margin != null {
      @include react-md-button-fixed-positions($md-btn-floating-margin);
    }
  }

  @if $include-media {
    @include react-md-buttons-media($include-flat, $include-raised, $include-icon, $include-floating, $include-dense-icons);
  }
}

/// Themes the buttons ONLY when the `$primary-color` does not equal the `$md-primary-color`,
/// the `$secondary-color` does not equal the `$md-secondary-color`, or the `$md-light-theme`
/// does not equal the `$md-light-theme`.
///
/// @example scss - Example Usage SCSS
///   @include react-md-theme-buttons($md-orange-500, $md-purple-a-200, !$md-light-theme);
///
/// @param {Color} primary-color [$md-primary-color] - The primary color to theme the
///     buttons with.
/// @param {Color} secondary-color [$md-secondary-color] - The secondary color to theme
///     the buttons with.
/// @param {Boolean} light-theme [$md-light-theme] - Boolean if the buttons should be styled
///     for the light theme.
/// @param {Boolean} include-flat [$md-btn-include-flat] - Boolean if the flat styles for
///     buttons should be included.
/// @param {Boolean} include-raised [$md-btn-include-raised] - Boolean if the raised styles for
///     buttons should be included.
/// @param {Boolean} include-icon [$md-btn-include-icon] - Boolean if the icon styles for
///     buttons should be included.
/// @param {Boolean} include-floating [$md-btn-include-floating] - Boolean if the floating styles for
///     buttons should be included.
/// @group buttons, themes
@mixin react-md-theme-buttons(
  $primary-color: $md-primary-color,
  $secondary-color: $md-secondary-color,
  $light-theme: $md-light-theme,
  $include-flat: $md-btn-include-flat,
  $include-raised: $md-btn-include-raised,
  $include-icon: $md-btn-include-icon,
  $include-floating: $md-btn-include-floating
) {
  @if $light-theme != $md-light-theme {
    @if $include-flat or $include-raised {
      .md-btn--raised-disabled {
        background: get-color('divider', $light-theme);
      }
    }

    @if $include-icon or $include-floating {
      .md-btn--icon {
        color: get-color('icon', $light-theme);
      }
    }
  }

  @if $primary-color != $md-primary-color {
    .md-btn--color-primary-active {
      background: rgba($primary-color, .12);
    }
  }

  @if $secondary-color != $md-secondary-color {
    .md-btn--color-secondary-active {
      background: rgba($secondary-color, .12);
    }
  }
}

/// Creates the styles for buttons on mobile devices. This really just sets the
/// font size and adds some styles to make the button be accessible for touch.
///
/// @example scss - Example Usage SCSS
///   @media #{$md-mobile-media} {
///     @include react-md-buttons-mobile;
///   }
///
/// @param {Boolean} include-flat [$md-btn-include-flat] - Boolean if the flat styles for
///     buttons should be included.
/// @param {Boolean} include-raised [$md-btn-include-raised] - Boolean if the raised styles for
///     buttons should be included.
/// @param {Boolean} include-floating [$md-btn-include-floating] - Boolean if the floating styles for
///     buttons should be included.
/// @group buttons, media-queries
@mixin react-md-buttons-mobile($include-flat: $md-btn-include-flat, $include-raised: $md-btn-include-raised, $include-floating: $md-btn-include-floating) {
  @if $include-flat or $include-raised {
    @if $md-btn-text-height == null {
      $accessible-padding: ($md-btn-accessible-height - $md-btn-mobile-height) / 2;

      .md-btn--text {
        height: $md-btn-mobile-height;
        margin-bottom: $accessible-padding;
        margin-top: $accessible-padding;

        @if $md-btn-text-height == null {
          font-size: $md-btn-mobile-font-size;
        }

        // The accessible height is supposed to be 48px while the button height is supposed
        // to be 36px.. So hack for touch by adding some margin for the difference and adding
        // ::before/::after absolutely positioned so they can be touched as well? Iunno
        &::before,
        &::after {
          content: '';
          height: $accessible-padding;
          left: 0;
          position: absolute;
          right: 0;
        }

        &::before {
          top: -$accessible-padding;
        }

        &::after {
          bottom: -$accessible-padding;
        }
      }
    } @else if $md-btn-text-font-size == null {
      .md-btn--text {
        font-size: $md-btn-mobile-font-size;
      }
    }
  }

  @if $include-floating and $md-btn-floating-margin == null {
    @include react-md-button-fixed-positions($md-btn-mobile-floating-margin);
  }
}

/// Creates the styles for buttons on desktop screens.
///
/// @example scss - Example Usage SCSS
///   @media #{$md-desktop-media} {
///     @include react-md-buttons-desktop;
///   }
///
/// @param {Boolean} include-flat [$md-btn-include-flat] - Boolean if the flat styles for
///     buttons should be included.
/// @param {Boolean} include-raised [$md-btn-include-raised] - Boolean if the raised styles for
///     buttons should be included.
/// @param {Boolean} include-icon [$md-btn-include-icon] - Boolean if the icon styles for
///     buttons should be included.
/// @param {Boolean} include-floating [$md-btn-include-floating] - Boolean if the floating styles for
///     buttons should be included.
/// @param {Boolean} include-dense-icons [$md-font-icon-include-dense] - Boolean if the dense specs for icons
///     should be included for buttons.
/// @group buttons, media-queries
@mixin react-md-buttons-desktop(
  $include-flat: $md-btn-include-flat,
  $include-raised: $md-btn-include-raised,
  $include-icon: $md-btn-include-icon,
  $include-floating: $md-btn-include-floating,
  $include-dense-icons: $md-font-icon-include-dense
) {
  @if $include-flat or $include-raised {
    @if $md-btn-text-height == null {
      .md-btn--text {
        height: $md-btn-desktop-height;
        margin-bottom: 0;
        margin-top: 0;

        @if $md-btn-text-height == null {
          font-size: $md-btn-desktop-font-size;
        }

        &::before,
        &::after {
          display: none;
          visibility: hidden;
        }

        &::before {
          top: 0;
        }

        &::after {
          bottom: 0;
        }
      }
    } @else if $md-btn-text-font-size == null {
      .md-btn--text {
        font-size: $md-btn-desktop-font-size;
      }
    }
  }

  @if $include-floating and $md-btn-floating-margin == null {
    @include react-md-button-fixed-positions($md-btn-desktop-floating-margin);
  }

  @if ($include-icon or $include-floating) and $include-dense-icons {
    $icon-size-diff: $md-btn-icon-size != $md-btn-icon-dense-size;
    $icon-pad-diff: $md-btn-icon-padding != $md-btn-icon-dense-padding;
    @if ($icon-size-diff or $icon-pad-diff) {
      .md-btn--icon {
        @if $icon-size-diff {
          height: $md-btn-icon-dense-size;
          width: $md-btn-icon-dense-size;
        }

        @if $icon-pad-diff {
          padding: $md-btn-icon-dense-padding;
        }
      }
    }

    @if $md-btn-floating-size != $md-btn-floating-dense-size {
      .md-btn--floating {
        height: $md-btn-floating-dense-size;
        padding: ($md-btn-floating-dense-size - $md-font-icon-dense-size) / 2;
        width: $md-btn-floating-dense-size;

        &-mini {
          height: $md-btn-floating-mini-size;
          padding: ($md-btn-floating-mini-size - $md-font-icon-dense-size) / 2;
          width: $md-btn-floating-mini-size;
        }
      }
    }
  }
}

/// Creates the media queries and styles for buttons for mobile and desktop.
///
/// @example scss - Example Usage SCSS
///   @include react-md-buttons-media;
///
/// @param {Boolean} include-flat [$md-btn-include-flat] - Boolean if the flat styles for
///     buttons should be included.
/// @param {Boolean} include-raised [$md-btn-include-raised] - Boolean if the raised styles for
///     buttons should be included.
/// @param {Boolean} include-icon [$md-btn-include-icon] - Boolean if the icon styles for
///     buttons should be included.
/// @param {Boolean} include-floating [$md-btn-include-floating] - Boolean if the floating styles for
///     buttons should be included.
/// @param {Boolean} include-dense-icons [$md-font-icon-include-dense] - Boolean if the dense specs for icons
///     should be included for buttons.
/// @group buttons, media-queries
@mixin react-md-buttons-media(
  $include-flat: $md-btn-include-flat,
  $include-raised: $md-btn-include-raised,
  $include-icon: $md-btn-include-icon,
  $include-floating: $md-btn-include-floating,
  $include-dense-icons: $md-font-icon-include-dense
) {
  @media #{$md-mobile-media} {
    @include react-md-buttons-mobile($include-flat, $include-raised, $include-floating);
  }

  @media #{$md-desktop-media} {
    @include react-md-buttons-desktop($include-flat, $include-raised, $include-icon, $include-floating, $include-dense-icons);
  }
}

/// A simple mixin for applying a screen edge margin positioning to a fixed button. If the position name
/// contains the first letter of the positioning style, the margin will get applied to that style.
///
/// So if the position name is 'tl', the margin will get applied to the `top` and the `left.
///
/// @param {Number} margin - the button's margin from the screen edge.
/// @param {List} positions [$md-btn-floating-fixed-positions] - The positions to create the styles for.
@mixin react-md-button-fixed-positions($margin, $positions: $md-btn-floating-fixed-positions) {
  @each $position in $positions {
    .md-btn--fixed-#{$position} {
      bottom: if(str-index($position, b), $margin, null);
      left: if(str-index($position, l), $margin, null);
      right: if(str-index($position, r), $margin, null);
      top: if(str-index($position, t), $margin, null);
    }
  }
}
