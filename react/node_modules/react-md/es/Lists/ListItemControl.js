var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent, Children, cloneElement } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';

import themeColors from '../utils/themeColors';
import ListItemText from './ListItemText';
import TileAddon from './TileAddon';

var ListItemControl = function (_PureComponent) {
  _inherits(ListItemControl, _PureComponent);

  function ListItemControl() {
    _classCallCheck(this, ListItemControl);

    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
  }

  ListItemControl.prototype.render = function render() {
    var _props = this.props,
        className = _props.className,
        tileStyle = _props.tileStyle,
        tileClassName = _props.tileClassName,
        primaryAction = _props.primaryAction,
        secondaryAction = _props.secondaryAction,
        primaryText = _props.primaryText,
        secondaryText = _props.secondaryText,
        threeLines = _props.threeLines,
        leftIcon = _props.leftIcon,
        leftAvatar = _props.leftAvatar,
        rightIcon = _props.rightIcon,
        rightAvatar = _props.rightAvatar,
        props = _objectWithoutProperties(_props, ['className', 'tileStyle', 'tileClassName', 'primaryAction', 'secondaryAction', 'primaryText', 'secondaryText', 'threeLines', 'leftIcon', 'leftAvatar', 'rightIcon', 'rightAvatar']);

    var control = Children.only(primaryAction || secondaryAction);
    var text = React.createElement(ListItemText, {
      key: 'text',
      primaryText: control.props.label || primaryText,
      secondaryText: secondaryText,
      className: cn({
        'md-tile-content--left-icon': leftIcon,
        'md-tile-content--left-avatar': leftAvatar,
        'md-tile-content--left-button': primaryAction,
        'md-tile-content--right-padding': primaryAction
      })
    });
    control = cloneElement(control, {
      className: cn('md-list-control', {
        'md-list-control--right': secondaryAction
      }, control.props.className),
      label: text
    });

    var leftNode = React.createElement(TileAddon, {
      key: 'left-addon',
      icon: leftIcon,
      avatar: leftAvatar
    });

    var rightNode = React.createElement(TileAddon, {
      key: 'right-addon',
      icon: rightIcon,
      avatar: rightAvatar
    });

    var icond = !!leftIcon || !!rightIcon;
    var avatard = !!leftAvatar || !!rightAvatar;

    return React.createElement(
      'li',
      _extends({}, props, { className: cn('md-list-item', className) }),
      React.createElement(
        'div',
        {
          style: tileStyle,
          className: cn('md-list-tile', {
            'md-list-tile--icon': !secondaryText && icond && !avatard,
            'md-list-tile--avatar': !secondaryText && avatard,
            'md-list-tile--two-lines': secondaryText && !threeLines,
            'md-list-tile--three-lines': secondaryText && threeLines,
            'md-list-tile--control-left': primaryAction,
            'md-list-tile--control-right': secondaryAction
          }, themeColors({ text: true }), tileClassName)
        },
        leftNode,
        control,
        rightNode
      )
    );
  };

  return ListItemControl;
}(PureComponent);

ListItemControl.propTypes = {
  /**
   * An optional style to apply to the `.md-list-item`.
   */
  style: PropTypes.object,

  /**
   * An optional className to apply to the `.md-list-item`.
   */
  className: PropTypes.string,

  /**
   * An optional style to apply to the `.md-list-tile`.
   */
  tileStyle: PropTypes.object,

  /**
   * An optional className to apply to the `.md-list-tile`.
   */
  tileClassName: PropTypes.string,

  /**
   * The primary text to display in the `ListItemControl`. The `primaryAction` or
   * `secondaryAction` will end up getting the `label` prop injected into it with
   * a combination of the `primaryText` and `secondaryText`. If the `primaryAction`
   * or `secondaryAction` already have a label prop, the `label` prop will be used
   * as the `primaryText`.
   */
  primaryText: PropTypes.node,

  /**
   * An optional secondary text that can be displayed in the label of the `primaryAction`
   * or `secondaryAction`.
   */
  secondaryText: PropTypes.node,

  /**
   * Boolean if the primary and secondary text will span three lines.
   */
  threeLines: PropTypes.bool,

  /**
   * The primary action of the `ListItemControl`. This _should_ normally
   * be a type of `SelectionControl`
   */
  primaryAction: PropTypes.element,

  /**
   * The secondary action of the `ListItemControl`. This _should_ normally
   * be a type of `SelectionControl`. If it is a selection control,
   * make sure to add the `labelBefore` prop to get correct positioning.
   */
  secondaryAction: PropTypes.element,

  /**
   * An optional `FontIcon` to display to the left of the action.
   */
  leftIcon: PropTypes.node,

  /**
   * An optional `Avatar` to display to the left of the action.
   */
  leftAvatar: PropTypes.node,

  /**
   * An optional `FontIcon` to display to the right of the action.
   */
  rightIcon: PropTypes.node,

  /**
   * An optional `FontIcon` to display to the right of the action.
   */
  rightAvatar: PropTypes.node,

  /**
   * Defines the number of items in the list. This is only required when all items in the
   * list are not present in the DOM.
   *
   * @see https://www.w3.org/TR/wai-aria/states_and_properties#aria-setsize
   */
  'aria-setsize': PropTypes.number,

  /**
   * Defines the items position in the list. This is only required when all items in the list
   * are not present in the DOM. The custom validation just requires this prop if the `aria-setsize`
   * prop is defined as a helpful reminder.
   *
   * @see https://www.w3.org/TR/wai-aria/states_and_properties#aria-posinset
   */
  'aria-posinset': function ariaPosinset(props, propName) {
    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    var validator = PropTypes.number;
    if (typeof props['aria-setsize'] !== 'undefined') {
      validator = validator.isRequired;
    }

    return validator.apply(undefined, [props, propName].concat(args));
  }
};
export default ListItemControl;