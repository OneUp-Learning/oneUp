var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';

import themeColors from '../utils/themeColors';

/**
 * The `ListItemText` component is used to render the `primaryText` and an optional
 * `secondaryText` for a `ListItem`.
 */

var ListItemText = function (_PureComponent) {
  _inherits(ListItemText, _PureComponent);

  function ListItemText() {
    _classCallCheck(this, ListItemText);

    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
  }

  ListItemText.prototype.render = function render() {
    var _cn;

    var _props = this.props,
        active = _props.active,
        activeClassName = _props.activeClassName,
        disabled = _props.disabled,
        primaryText = _props.primaryText,
        primaryTextStyle = _props.primaryTextStyle,
        primaryTextClassName = _props.primaryTextClassName,
        secondaryText = _props.secondaryText,
        secondaryTextStyle = _props.secondaryTextStyle,
        secondaryTextClassName = _props.secondaryTextClassName,
        className = _props.className,
        threeLines = _props.threeLines,
        props = _objectWithoutProperties(_props, ['active', 'activeClassName', 'disabled', 'primaryText', 'primaryTextStyle', 'primaryTextClassName', 'secondaryText', 'secondaryTextStyle', 'secondaryTextClassName', 'className', 'threeLines']);

    var secondaryTextNode = void 0;
    if (secondaryText) {
      secondaryTextNode = React.createElement(
        'div',
        {
          style: secondaryTextStyle,
          className: cn('md-tile-text--secondary', {
            'md-tile-text--three-lines': threeLines
          }, themeColors({ disabled: disabled, hint: !disabled }), secondaryTextClassName)
        },
        secondaryText
      );
    }

    return React.createElement(
      'div',
      _extends({}, props, { className: cn('md-tile-content', className) }),
      React.createElement(
        'div',
        {
          style: primaryTextStyle,
          className: cn('md-tile-text--primary', (_cn = {}, _cn[activeClassName] = !disabled && active, _cn), themeColors({ disabled: disabled, text: !active }), primaryTextClassName)
        },
        primaryText
      ),
      secondaryTextNode
    );
  };

  return ListItemText;
}(PureComponent);

ListItemText.propTypes = {
  active: PropTypes.bool,
  activeClassName: PropTypes.string,
  disabled: PropTypes.bool,
  primaryText: PropTypes.node.isRequired,
  primaryTextStyle: PropTypes.object,
  primaryTextClassName: PropTypes.string,
  secondaryText: PropTypes.node,
  secondaryTextStyle: PropTypes.object,
  secondaryTextClassName: PropTypes.string,
  className: PropTypes.string,
  threeLines: PropTypes.bool
};
export default ListItemText;