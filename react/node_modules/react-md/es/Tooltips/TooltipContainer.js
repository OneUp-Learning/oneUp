function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import { findDOMNode } from 'react-dom';
import PropTypes from 'prop-types';
import TransitionGroup from 'react-transition-group/TransitionGroup';
import cn from 'classnames';

import { TAB } from '../constants/keyCodes';
import captureNextEvent from '../utils/EventUtils/captureNextEvent';
import { addTouchEvent, removeTouchEvent } from '../utils/EventUtils/touches';
import Tooltip from './Tooltip';

function getContainer(tooltip) {
  return tooltip.parentNode;
}

var TooltipContainer = function (_PureComponent) {
  _inherits(TooltipContainer, _PureComponent);

  function TooltipContainer() {
    var _temp, _this, _ret;

    _classCallCheck(this, TooltipContainer);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.state = { visible: false }, _this._delayedTimeout = null, _this._unlinkTarget = function () {
      var target = _this._target;
      if (target) {
        removeTouchEvent(target, 'start', _this._showTooltip);
        removeTouchEvent(target, 'end', _this._hideTooltip);
        target.removeEventListener('mouseover', _this._showTooltip);
        target.removeEventListener('mouseleave', _this._hideTooltip);
        target.removeEventListener('keyup', _this._handleKeyUp);
        target.removeEventListener('blur', _this._hideTooltip);
      }
    }, _this._setTarget = function () {
      var container = _this._container;
      var target = _this.props.target;


      _this._unlinkTarget();

      if (typeof target === 'function') {
        target = target(container, _this);
      }
      target = target ? findDOMNode(target) : container;
      _this._target = target || null;

      if (target) {
        addTouchEvent(target, 'start', _this._showTooltip);
        addTouchEvent(target, 'end', _this._hideTooltip);
        target.addEventListener('mouseover', _this._showTooltip);
        target.addEventListener('mouseleave', _this._hideTooltip);
        target.addEventListener('keyup', _this._handleKeyUp);
        target.addEventListener('blur', _this._hideTooltip);
      }
    }, _this._setContainers = function (span) {
      if (span) {
        _this._container = _this.props.container(span.parentNode, _this);
      }
    }, _this._stopContextMenu = function (e) {
      e.preventDefault();
      window.removeEventListener('contextmenu', _this._stopContextMenu, true);
      captureNextEvent('click');
      _this.setState({ visible: true });
    }, _this._showTooltip = function (e) {
      if (e.type === 'mouseover' && _this._touched) {
        return;
      }

      if (e.type === 'touchstart') {
        _this._touched = true;

        window.addEventListener('contextmenu', _this._stopContextMenu, true);
        return;
      }

      var delay = _this.props.delay;

      if (_this._delayedTimeout) {
        clearTimeout(_this._delayedTimeout);
      }

      if (delay) {
        _this._delayedTimeout = setTimeout(function () {
          _this._delayedTimeout = null;

          _this.setState({ visible: true });
        }, delay);
      } else {
        _this.setState({ visible: true });
      }
    }, _this._hideTooltip = function (e) {
      if (_this._delayedTimeout) {
        clearTimeout(_this._delayedTimeout);
      }

      if (e.type === 'mouseover' && _this._touched) {
        return;
      }

      _this.setState({ visible: false });
    }, _this._handleKeyUp = function (e) {
      if ((e.which || e.keyCode) === TAB) {
        _this._showTooltip(e);
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  TooltipContainer.prototype.componentDidMount = function componentDidMount() {
    this._setTarget();
  };

  TooltipContainer.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (this.props.target !== prevProps.target) {
      this._setTarget();
    }
  };

  TooltipContainer.prototype.componentWillUnmount = function componentWillUnmount() {
    this._unlinkTarget();
    this._target = null;

    if (this._delayedTimeout) {
      clearTimeout(this._delayedTimeout);
    }
  };

  TooltipContainer.prototype.render = function render() {
    var visible = this.state.visible;
    var _props = this.props,
        style = _props.style,
        className = _props.className,
        tooltipStyle = _props.tooltipStyle,
        tooltipClassName = _props.tooltipClassName,
        label = _props.label,
        position = _props.position,
        enterTimeout = _props.enterTimeout,
        leaveTimeout = _props.leaveTimeout;


    var tooltip = React.createElement(
      Tooltip,
      {
        key: 'tooltip',
        style: tooltipStyle,
        className: tooltipClassName,
        position: position,
        enterTimeout: enterTimeout,
        leaveTimeout: leaveTimeout
      },
      label
    );

    return React.createElement(
      TransitionGroup,
      {
        style: style,
        className: cn('md-tooltip-container', className),
        component: 'div'
      },
      React.createElement('span', { ref: this._setContainers, 'aria-hidden': true }),
      visible ? tooltip : null
    );
  };

  return TooltipContainer;
}(PureComponent);

TooltipContainer.propTypes = {
  style: PropTypes.object,
  className: PropTypes.string,
  tooltipStyle: PropTypes.object,
  tooltipClassName: PropTypes.string,
  label: PropTypes.node.isRequired,
  position: Tooltip.propTypes.position,
  delay: PropTypes.number,
  enterTimeout: Tooltip.propTypes.enterTimeout,
  leaveTimeout: Tooltip.propTypes.leaveTimeout,
  /**
   * A function that returns a DOM element that will be used as the tooltip's container.
   * A ref to the tooltip's DOM element will be passed into the function.
   */
  container: PropTypes.func,
  /**
   * A component/element the tooltip should be linked to,
   * or a function that returns such a component/element.
   * A ref to the tooltip's container will be passed into the function.
   *
   * By default the tooltip's container will be used as the target.
   */
  target: PropTypes.oneOfType([PropTypes.object, PropTypes.func])
};
TooltipContainer.defaultProps = {
  container: getContainer,
  delay: 0
};
export default TooltipContainer;