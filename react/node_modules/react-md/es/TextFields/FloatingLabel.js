var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';

import themeColors from '../utils/themeColors';

var FloatingLabel = function (_PureComponent) {
  _inherits(FloatingLabel, _PureComponent);

  function FloatingLabel() {
    _classCallCheck(this, FloatingLabel);

    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
  }

  FloatingLabel.prototype.render = function render() {
    var _cn;

    var _props = this.props,
        label = _props.label,
        htmlFor = _props.htmlFor,
        className = _props.className,
        floating = _props.floating,
        active = _props.active,
        error = _props.error,
        disabled = _props.disabled,
        iconOffset = _props.iconOffset,
        customSize = _props.customSize,
        props = _objectWithoutProperties(_props, ['label', 'htmlFor', 'className', 'floating', 'active', 'error', 'disabled', 'iconOffset', 'customSize']);

    if (!label) {
      return null;
    }

    return React.createElement(
      'label',
      _extends({}, props, {
        htmlFor: htmlFor,
        className: cn('md-floating-label', (_cn = {
          'md-floating-label--inactive': !floating,
          'md-floating-label--inactive-sized': !floating && !customSize
        }, _cn['md-floating-label--' + customSize] = customSize, _cn['md-floating-label--inactive-' + customSize] = customSize && !floating, _cn['md-floating-label--floating'] = floating, _cn['md-floating-label--icon-offset'] = iconOffset, _cn), themeColors({
          disabled: disabled,
          error: error,
          hint: !active,
          primary: active
        }, className))
      }),
      label
    );
  };

  return FloatingLabel;
}(PureComponent);

FloatingLabel.propTypes = {
  style: PropTypes.object,
  className: PropTypes.string,
  label: PropTypes.node,
  floating: PropTypes.bool,
  error: PropTypes.bool,
  active: PropTypes.bool,
  disabled: PropTypes.bool,
  iconOffset: PropTypes.bool,
  customSize: PropTypes.string,
  htmlFor: PropTypes.string
};
export default FloatingLabel;