function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';

var Message = function (_PureComponent) {
  _inherits(Message, _PureComponent);

  function Message() {
    _classCallCheck(this, Message);

    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
  }

  Message.prototype.render = function render() {
    var _props = this.props,
        active = _props.active,
        children = _props.children,
        className = _props.className;


    if (!children) {
      return null;
    }

    return React.createElement(
      'div',
      {
        'aria-hidden': !active,
        className: cn('md-text-field-message', 'md-text-field-message--' + (active ? '' : 'in') + 'active', className)
      },
      children
    );
  };

  return Message;
}(PureComponent);

Message.propTypes = {
  active: PropTypes.bool,
  className: PropTypes.string,
  children: PropTypes.node
};
export default Message;