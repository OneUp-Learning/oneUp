function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';

import themeColors from '../utils/themeColors';
import Message from './Message';

var TextFieldMessage = function (_PureComponent) {
  _inherits(TextFieldMessage, _PureComponent);

  function TextFieldMessage(props) {
    _classCallCheck(this, TextFieldMessage);

    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

    _this.state = {
      message: props.error && props.errorText || props.helpText || props.errorText,
      isMessageVisible: _this._isMessageVisible(props)
    };
    return _this;
  }

  TextFieldMessage.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var keys = ['active', 'error', 'helpOnFocus', 'helpText', 'errorText'];
    if (this._anyChanges(keys, this.props, nextProps)) {
      this.setState({
        isMessageVisible: this._isMessageVisible(nextProps),
        message: nextProps.error && nextProps.errorText || nextProps.helpText || nextProps.errorText
      });
    }
  };

  TextFieldMessage.prototype._anyChanges = function _anyChanges(keys, p1, p2) {
    var changed = false;
    keys.some(function (key) {
      if (p1[key] !== p2[key]) {
        changed = true;
      }

      return changed;
    });

    return changed;
  };

  TextFieldMessage.prototype._isMessageVisible = function _isMessageVisible(props) {
    var error = props.error,
        errorText = props.errorText,
        helpText = props.helpText,
        helpOnFocus = props.helpOnFocus,
        active = props.active;

    if (error && errorText) {
      return true;
    }

    return !!(helpText && (!helpOnFocus || active));
  };

  TextFieldMessage.prototype.render = function render() {
    var _props = this.props,
        maxLength = _props.maxLength,
        error = _props.error,
        className = _props.className,
        errorText = _props.errorText,
        helpText = _props.helpText,
        currentLength = _props.currentLength,
        leftIcon = _props.leftIcon,
        rightIcon = _props.rightIcon,
        block = _props.block,
        active = _props.active;
    var _state = this.state,
        isMessageVisible = _state.isMessageVisible,
        message = _state.message;


    if (currentLength === 'undefined' || !helpText && !errorText && !maxLength) {
      return null;
    }

    return React.createElement(
      'div',
      {
        className: cn('md-text-field-message-container', {
          'md-text-field-message-container--count-only': !message || !isMessageVisible,
          'md-text-field-message-container--left-icon-offset': leftIcon,
          'md-text-field-message-container--right-icon-offset': rightIcon,
          'md-full-width': !block
        }, themeColors({ error: error, disabled: !error }), className)
      },
      React.createElement(
        Message,
        { key: 'message', active: isMessageVisible },
        message
      ),
      React.createElement(
        Message,
        { key: 'counter', className: 'md-text-field-message--counter', active: active },
        maxLength ? currentLength + ' / ' + maxLength : null
      )
    );
  };

  return TextFieldMessage;
}(PureComponent);

TextFieldMessage.propTypes = {
  className: PropTypes.string,
  error: PropTypes.bool,
  helpText: PropTypes.node,
  errorText: PropTypes.node,
  active: PropTypes.bool,
  helpOnFocus: PropTypes.bool,
  maxLength: PropTypes.number,
  currentLength: PropTypes.number,
  leftIcon: PropTypes.bool,
  rightIcon: PropTypes.bool,
  block: PropTypes.bool
};
export default TextFieldMessage;