function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';

import TICK from '../constants/CSSTransitionGroupTick';

var Ink = function (_PureComponent) {
  _inherits(Ink, _PureComponent);

  function Ink(props) {
    _classCallCheck(this, Ink);

    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

    _this.state = {
      active: false,
      expanded: false,
      pulsing: false,
      leaving: false
    };
    return _this;
  }

  Ink.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (!this.props.aborted && nextProps.aborted) {
      if (this._timeout) {
        clearTimeout(this._timeout);
      }

      if (this._abort) {
        this._abort();
      }

      this.setState({ active: false, expanding: false, pulsing: false, leaving: false });
    }
  };

  Ink.prototype.componentWillUnmount = function componentWillUnmount() {
    if (this._timeout) {
      clearTimeout(this._timeout);
    }
  };

  Ink.prototype.componentWillEnter = function componentWillEnter(cb) {
    var _this2 = this;

    if (this.props.aborted) {
      cb();
      return;
    }

    var _props = this.props,
        transitionOverlap = _props.transitionOverlap,
        transitionEnterTimeout = _props.transitionEnterTimeout;

    this._abort = cb;

    this._timeout = setTimeout(function () {
      _this2._timeout = setTimeout(function () {
        _this2._timeout = null;
        _this2._abort = null;

        cb();
      }, transitionEnterTimeout - transitionOverlap);

      _this2.setState({ expanded: true });
    }, TICK);

    this.setState({ active: true });
  };

  Ink.prototype.componentDidEnter = function componentDidEnter() {
    var _this3 = this;

    if (this.props.pulse) {
      this._timeout = setTimeout(function () {
        _this3._timeout = null;

        _this3.setState({ pulsing: true });
      }, this.props.transitionEnterTimeout);
    }
  };

  Ink.prototype.componentWillLeave = function componentWillLeave(cb) {
    var _this4 = this;

    if (this.props.aborted) {
      cb();
      return;
    }

    if (this._timeout) {
      clearTimeout(this._timeout);
    }

    this._abort = cb;
    this._timeout = setTimeout(function () {
      _this4._timeout = null;

      cb();
    }, this.props.transitionLeaveTimeout);

    this.setState({ pulsing: false, leaving: true });
  };

  Ink.prototype.componentDidLeave = function componentDidLeave() {
    if (!this.props.aborted && this.props.onRemove) {
      this.props.onRemove();
    }
  };

  Ink.prototype.render = function render() {
    var _props2 = this.props,
        style = _props2.style,
        className = _props2.className,
        left = _props2.left,
        top = _props2.top,
        size = _props2.size;
    var _state = this.state,
        active = _state.active,
        expanded = _state.expanded,
        pulsing = _state.pulsing,
        leaving = _state.leaving;


    return React.createElement('span', {
      style: Object.assign({}, style, {
        left: left,
        top: top,
        height: size,
        width: size
      }),
      className: cn('md-ink', {
        'md-ink--active': active,
        'md-ink--expanded': expanded,
        'md-ink--pulsing': pulsing,
        'md-ink--leaving': leaving
      }, className)
    });
  };

  return Ink;
}(PureComponent);

Ink.propTypes = {
  style: PropTypes.object,
  className: PropTypes.string,
  aborted: PropTypes.bool,
  onRemove: PropTypes.func,
  left: PropTypes.number.isRequired,
  top: PropTypes.number.isRequired,
  size: PropTypes.number.isRequired,
  transitionOverlap: PropTypes.number.isRequired,
  transitionEnterTimeout: PropTypes.number.isRequired,
  transitionLeaveTimeout: PropTypes.number.isRequired,
  pulse: PropTypes.bool
};
export default Ink;