function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';

import themeColors from '../utils/themeColors';

/**
 * This is a component for rendering a year in the Date Picker's Year picker
 * list.
 */

var Year = function (_PureComponent) {
  _inherits(Year, _PureComponent);

  function Year() {
    var _temp, _this, _ret;

    _classCallCheck(this, Year);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.state = { desktopActive: false }, _this._setActiveFocus = function (btn) {
      if (btn && _this.props.active) {
        btn.focus();
      }
    }, _this._setActive = function () {
      _this.setState({ desktopActive: true });
    }, _this._setInactive = function () {
      _this.setState({ desktopActive: false });
    }, _this._handleClick = function (e) {
      _this.props.onClick(_this.props.year, e);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  Year.prototype.render = function render() {
    var desktopActive = this.state.desktopActive;
    var _props = this.props,
        active = _props.active,
        className = _props.className,
        year = _props.year;

    return React.createElement(
      'button',
      {
        type: 'button',
        ref: this._setActiveFocus,
        className: cn('md-year', { 'md-year--active': active }, themeColors({
          text: !active && !desktopActive,
          primary: active || desktopActive
        }), 'md-btn md-pointer--hover md-full-width', className),
        onClick: this._handleClick
      },
      year
    );
  };

  return Year;
}(PureComponent);

Year.propTypes = {
  className: PropTypes.string,
  active: PropTypes.bool.isRequired,
  onClick: PropTypes.func.isRequired,
  year: PropTypes.number.isRequired
};
export default Year;