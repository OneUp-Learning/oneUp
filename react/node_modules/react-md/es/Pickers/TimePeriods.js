function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';

import addHours from '../utils/DateUtils/addHours';
import PickerControl from './PickerControl';

/**
 * This component displays a section for switching between the AM
 * and PM time periods.
 */

var TimePeriods = function (_PureComponent) {
  _inherits(TimePeriods, _PureComponent);

  function TimePeriods() {
    var _temp, _this, _ret;

    _classCallCheck(this, TimePeriods);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this._setAM = function () {
      if (_this.props.timePeriod !== 'AM') {
        _this.props.setTempTime(addHours(_this.props.tempTime, -12));
      }
    }, _this._setPM = function () {
      if (_this.props.timePeriod !== 'PM') {
        _this.props.setTempTime(addHours(_this.props.tempTime, 12));
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  TimePeriods.prototype.render = function render() {
    var timePeriod = this.props.timePeriod;

    return React.createElement(
      'div',
      { className: 'md-time-periods' },
      React.createElement(
        PickerControl,
        { onClick: this._setAM, active: timePeriod === 'AM' },
        React.createElement(
          'h6',
          { className: 'md-time-period' },
          'AM'
        )
      ),
      React.createElement(
        PickerControl,
        { onClick: this._setPM, active: timePeriod === 'PM' },
        React.createElement(
          'h6',
          { className: 'md-time-period' },
          'PM'
        )
      )
    );
  };

  return TimePeriods;
}(PureComponent);

TimePeriods.propTypes = {
  /**
   * The current time for the time picker.
   */
  tempTime: PropTypes.instanceOf(Date).isRequired,

  /**
   * A function to update the time for the time picker.
   */
  setTempTime: PropTypes.func.isRequired,

  /**
   * The current time period.
   */
  timePeriod: PropTypes.string.isRequired
};
export default TimePeriods;