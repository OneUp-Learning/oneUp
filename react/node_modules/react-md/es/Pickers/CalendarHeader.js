function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';

import themeColors from '../utils/themeColors';
import isMonthBefore from '../utils/dates/isMonthBefore';
import toDayOfWeek from '../utils/dates/toDayOfWeek';
import addDate from '../utils/dates/addDate';
import Button from '../Buttons/Button';

/**
 * This component renders the controls for a `DatePicker`'s Calendar.
 * This will render a next and previous month button along with the
 * current month/year. It also renders the abbreviiations for the days
 * of the week.
 */

var CalendarHeader = function (_PureComponent) {
  _inherits(CalendarHeader, _PureComponent);

  function CalendarHeader(props) {
    _classCallCheck(this, CalendarHeader);

    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

    _this.state = _this._createState(props);
    return _this;
  }

  CalendarHeader.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var _props = this.props,
        DateTimeFormat = _props.DateTimeFormat,
        locales = _props.locales,
        date = _props.date;

    if (DateTimeFormat !== nextProps.DateTimeFormat || locales !== nextProps.locales || date !== nextProps.date) {
      this.setState(this._createState(nextProps));
    }
  };

  CalendarHeader.prototype._createState = function _createState() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props,
        DateTimeFormat = _ref.DateTimeFormat,
        locales = _ref.locales,
        date = _ref.date,
        firstDayOfWeek = _ref.firstDayOfWeek,
        titleFormat = _ref.titleFormat,
        weekdayClassName = _ref.weekdayClassName,
        weekdayFormat = _ref.weekdayFormat;

    var firstDay = toDayOfWeek(date, firstDayOfWeek);
    var formatter = new DateTimeFormat(locales, { weekday: weekdayFormat });
    var dows = [];
    for (var i = 0; i < 7; i++) {
      var dow = formatter.format(addDate(firstDay, i, 'D'));
      dows.push(React.createElement(
        'h4',
        {
          key: i,
          className: cn('md-calendar-date md-calendar-dow', themeColors({ disabled: true }), weekdayClassName)
        },
        dow
      ));
    }

    return {
      dows: dows,
      title: new DateTimeFormat(locales, titleFormat).format(date)
    };
  };

  CalendarHeader.prototype.render = function render() {
    var _state = this.state,
        dows = _state.dows,
        title = _state.title;
    var _props2 = this.props,
        date = _props2.date,
        minDate = _props2.minDate,
        maxDate = _props2.maxDate,
        onPreviousClick = _props2.onPreviousClick,
        previousIcon = _props2.previousIcon,
        onNextClick = _props2.onNextClick,
        nextIcon = _props2.nextIcon,
        titleClassName = _props2.titleClassName;


    var isPreviousDisabled = isMonthBefore(minDate, date);
    var isNextDisabled = isMonthBefore(date, maxDate);
    return React.createElement(
      'header',
      { className: 'md-calendar-header' },
      React.createElement(
        'div',
        { className: 'md-calendar-controls' },
        React.createElement(Button, {
          icon: true,
          onClick: onPreviousClick,
          disabled: isPreviousDisabled,
          className: 'md-calendar-control',
          iconEl: previousIcon
        }),
        React.createElement(
          'h4',
          { className: cn('md-title', titleClassName) },
          title
        ),
        React.createElement(Button, {
          icon: true,
          onClick: onNextClick,
          disabled: isNextDisabled,
          className: 'md-calendar-control',
          iconEl: nextIcon
        })
      ),
      React.createElement(
        'div',
        { className: 'md-calendar-dows' },
        dows
      )
    );
  };

  return CalendarHeader;
}(PureComponent);

CalendarHeader.propTypes = {
  className: PropTypes.string,
  children: PropTypes.node,
  date: PropTypes.instanceOf(Date).isRequired,
  minDate: PropTypes.instanceOf(Date),
  maxDate: PropTypes.instanceOf(Date),
  previousIcon: PropTypes.element,
  onPreviousClick: PropTypes.func.isRequired,
  nextIcon: PropTypes.node,
  onNextClick: PropTypes.func.isRequired,
  DateTimeFormat: PropTypes.func.isRequired,
  locales: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]).isRequired,
  /**
   * The first day of week: 0 for Sunday, 1 for Monday, 2 for Tuesday, and so on.
   */
  firstDayOfWeek: PropTypes.oneOf([0, 1, 2, 3, 4, 5, 6]),
  /**
   * An optional className to apply to the title.
   */
  titleClassName: PropTypes.string,
  /**
   * The DateTimeFormat options to apply to format the title.
   */
  titleFormat: PropTypes.shape({
    era: PropTypes.oneOf(['narrow', 'short', 'long']),
    year: PropTypes.oneOf(['numeric', '2-digit']),
    month: PropTypes.oneOf(['numeric', '2-digit', 'narrow', 'short', 'long'])
  }),
  /**
   * An optional className to apply to a weekday.
   */
  weekdayClassName: PropTypes.string,
  /**
   * The DateTimeFormat option to apply to format a weekday.
   */
  weekdayFormat: PropTypes.oneOf(['narrow', 'short', 'long'])
};
CalendarHeader.defaultProps = {
  firstDayOfWeek: 0,
  titleFormat: { month: 'long', year: 'numeric' },
  weekdayFormat: 'narrow'
};
export default CalendarHeader;