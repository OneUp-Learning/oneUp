var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent, Children, isValidElement, cloneElement } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';

var ToolbarTitle = function (_PureComponent) {
  _inherits(ToolbarTitle, _PureComponent);

  function ToolbarTitle() {
    _classCallCheck(this, ToolbarTitle);

    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
  }

  ToolbarTitle.prototype.render = function render() {
    var _props = this.props,
        title = _props.title,
        className = _props.className,
        prominent = _props.prominent,
        offset = _props.offset,
        props = _objectWithoutProperties(_props, ['title', 'className', 'prominent', 'offset']);

    if (!title) {
      return null;
    }

    var fullClassName = cn('md-title md-title--toolbar', {
      'md-title--toolbar-prominent': prominent,
      'md-title--toolbar-offset': offset
    }, className);

    if (isValidElement(title)) {
      var titleEl = Children.only(title);
      return cloneElement(title, _extends({}, props, {
        id: titleEl.props.id || props.id,
        className: cn(fullClassName, titleEl.props.className)
      }));
    }

    return React.createElement(
      'h2',
      _extends({}, props, {
        className: fullClassName
      }),
      title
    );
  };

  return ToolbarTitle;
}(PureComponent);

ToolbarTitle.propTypes = {
  className: PropTypes.string,
  prominent: PropTypes.bool,
  offset: PropTypes.bool,
  title: PropTypes.node
};
export default ToolbarTitle;