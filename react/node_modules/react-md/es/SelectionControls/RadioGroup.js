var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable no-unused-vars, no-shadow */
import React, { PureComponent, Children } from 'react';
import PropTypes from 'prop-types';
import deprecated from 'react-prop-types/lib/deprecated';

import SelectionControlGroup from './SelectionControlGroup';

// This will still work, but generate a lot of warnings

/**
 * The `RadioGroup` component is a state manager for the `Radio` component.
 * It will automatically inject the name, an onChange function, and
 * determine whether a radio is checked.
 *
 * This is just a simple wrapper to reduce some prop redundancy.
 */

var RadioGroup = function (_PureComponent) {
  _inherits(RadioGroup, _PureComponent);

  function RadioGroup() {
    _classCallCheck(this, RadioGroup);

    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
  }

  RadioGroup.prototype.render = function render() {
    var _props = this.props,
        children = _props.children,
        props = _objectWithoutProperties(_props, ['children']);

    delete props.id;
    delete props.defaultValue;

    var _props2 = this.props,
        id = _props2.id,
        defaultValue = _props2.defaultValue;

    if (!id) {
      id = props.name + '-radios-unique-please';
    }

    if (typeof props.value === 'undefined') {
      if (typeof defaultValue === 'undefined') {
        defaultValue = Children.map(children, function (_ref) {
          var value = _ref.props.value;
          return value;
        })[0];
      }
    }

    var controls = Children.map(children, function (radio) {
      var props = Object.assign({}, radio.props);
      delete props.checkedIcon;
      delete props.uncheckedIcon;
      delete props.checkedIconChildren;
      delete props.checkedIconClassName;
      delete props.uncheckedIconChildren;
      delete props.uncheckedIconClassName;
      return _extends({}, props);
    });
    return React.createElement(SelectionControlGroup, _extends({}, props, { id: id, defaultValue: defaultValue, type: 'radio', controls: controls }));
  };

  return RadioGroup;
}(PureComponent);

RadioGroup.propTypes = {
  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  defaultValue: PropTypes.string,
  className: PropTypes.string,
  children: PropTypes.arrayOf(PropTypes.node).isRequired,
  inline: PropTypes.bool,
  onChange: PropTypes.func,
  name: PropTypes.string,
  value: PropTypes.string,

  _deprecated: deprecated(PropTypes.bool, 'Use the `SelectionControlGroup` component instead')
};
export default RadioGroup;