var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import deprecated from 'react-prop-types/lib/deprecated';
import isRequiredForA11y from 'react-prop-types/lib/isRequiredForA11y';

import controlled from '../utils/PropTypes/controlled';
import SelectionControl from './SelectionControl';

var Switch = function (_PureComponent) {
  _inherits(Switch, _PureComponent);

  function Switch() {
    _classCallCheck(this, Switch);

    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
  }

  Switch.prototype.render = function render() {
    var _props = this.props,
        toggled = _props.toggled,
        defaultToggled = _props.defaultToggled,
        props = _objectWithoutProperties(_props, ['toggled', 'defaultToggled']);

    if (typeof toggled !== 'undefined' && typeof props.checked === 'undefined') {
      props.checked = toggled;
    }

    if (typeof defaultToggled !== 'undefined' && typeof props.defaultChecked === 'undefined') {
      props.defaultChecked = defaultToggled;
    }

    return React.createElement(SelectionControl, _extends({ type: 'switch' }, props, { __superSecreteProp: true }));
  };

  return Switch;
}(PureComponent);

Switch.propTypes = {
  /**
   * An id to use with the switch. This is used for accessibility and so that the label
   * triggers the switch toggle.
   */
  id: isRequiredForA11y(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),

  /**
   * An optional style to apply to the switch's container.
   */
  style: PropTypes.object,

  /**
   * An optional className to apply to the switch's container.
   */
  className: PropTypes.string,

  /**
   * A label to display with the switch. This is required for accessibility and triggering
   * the toggle.
   */
  label: PropTypes.node,

  /**
   * Boolean if the label should appear before the switch.
   */
  labelBefore: PropTypes.bool,

  /**
   * A name to use for the `Switch`. This is required for accessibility since behind the scenes
   * the `Switch` is renders as an `<input type="checkbox" />`.
   */
  name: isRequiredForA11y(PropTypes.oneOfType([PropTypes.number, PropTypes.string])),

  /**
   * Boolean if the `Switch` is disabled.
   */
  disabled: PropTypes.bool,

  /**
   * An optional function to call when the `checked` state of the `Switch` changes.
   * The callback will include the new checked state and the changeEvent.
   *
   * ```js
   * onChange(changeEvent.target.checked, changeEvent);
   * ```
   */
  onChange: PropTypes.func,

  /**
   * An optional value for the `Switch`. It is recommended to use a value though.
   */
  value: PropTypes.oneOfType([PropTypes.bool, PropTypes.number, PropTypes.string]),

  /**
   * Boolean if the `Switch` is checked by default.
   */
  defaultChecked: PropTypes.bool,

  /**
   * A boolean if the `Switch` is currently checked. This will required the `onChange` prop
   * to be defined.
   */
  checked: controlled(PropTypes.bool, 'onChange', 'defaultChecked'),

  defaultToggled: deprecated(PropTypes.bool, 'Use the `defaultChecked` prop instead'),
  toggled: deprecated(PropTypes.bool, 'Use the `checked` prop instead')
};
export default Switch;