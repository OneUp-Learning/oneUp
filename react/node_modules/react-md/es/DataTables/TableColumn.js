var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import deprecated from 'react-prop-types/lib/deprecated';

import themeColors from '../utils/themeColors';
import getCollapserStyles from '../utils/getCollapserStyles';
import getField from '../utils/getField';
import injectTooltip from '../Tooltips/injectTooltip';
import FontIcon from '../FontIcons/FontIcon';
import getDeprecatedIcon from '../FontIcons/getDeprecatedIcon';
import IconSeparator from '../Helpers/IconSeparator';

var CELL_SCOPE = {
  header: {
    scope: 'col'
  },
  noop: {}
};

/**
 * A column in a table. This is either the `th` or `td` component.
 */

var TableColumn = function (_PureComponent) {
  _inherits(TableColumn, _PureComponent);

  function TableColumn() {
    _classCallCheck(this, TableColumn);

    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
  }

  TableColumn.prototype.render = function render() {
    var _cn;

    var _props = this.props,
        className = _props.className,
        fixedStyle = _props.fixedStyle,
        fixedClassName = _props.fixedClassName,
        numeric = _props.numeric,
        header = _props.header,
        children = _props.children,
        sorted = _props.sorted,
        sortIcon = _props.sortIcon,
        tooltip = _props.tooltip,
        selectColumnHeader = _props.selectColumnHeader,
        adjusted = _props.adjusted,
        grow = _props.grow,
        sortIconBefore = _props.sortIconBefore,
        propPlain = _props.plain,
        propScope = _props.scope,
        cellIndex = _props.cellIndex,
        sortIconChildren = _props.sortIconChildren,
        sortIconClassName = _props.sortIconClassName,
        props = _objectWithoutProperties(_props, ['className', 'fixedStyle', 'fixedClassName', 'numeric', 'header', 'children', 'sorted', 'sortIcon', 'tooltip', 'selectColumnHeader', 'adjusted', 'grow', 'sortIconBefore', 'plain', 'scope', 'cellIndex', 'sortIconChildren', 'sortIconClassName']);

    var sortable = typeof sorted === 'boolean';
    var plain = getField(this.props, this.context, 'plain');
    var Component = header ? 'th' : 'td';
    var scope = getField(this.props, CELL_SCOPE[header ? 'header' : 'noop'], 'scope');

    var displayedChildren = children;
    var ariaSort = void 0;
    if (sortable) {
      ariaSort = sorted ? 'ascending' : 'descending';
      var icon = React.Children.only(getDeprecatedIcon(sortIconClassName, sortIconChildren, sortIcon));
      displayedChildren = React.createElement(
        IconSeparator,
        { label: children, iconBefore: sortIconBefore },
        React.cloneElement(icon, { className: getCollapserStyles({ flipped: !sorted }, icon.props.className) })
      );
    }

    var fixedHeader = header && this.context.fixedHeader;
    var fixedFooter = this.context.footer && this.context.fixedFooter;
    var fixed = fixedHeader || fixedFooter;
    var baseClassNames = themeColors({ text: !header, hint: header }, {
      'md-table-column--relative': tooltip,
      'md-table-column--select-field': selectColumnHeader
    });

    var mergedClassNames = cn((_cn = {
      'md-table-column--header': header,
      'md-table-column--data': !header && !plain,
      'md-table-column--plain': !header && plain,
      'md-table-column--adjusted': adjusted && !grow && !selectColumnHeader,
      'md-table-column--grow': grow,
      'md-table-column--sortable md-pointer--hover': sortable
    }, _cn[baseClassNames] = !fixed, _cn), className);

    if (fixed) {
      displayedChildren = React.createElement(
        'div',
        {
          className: cn('md-table-column__fixed', {
            'md-table-column__fixed--header': fixedHeader,
            'md-table-column__fixed--footer': fixedFooter
          })
        },
        React.createElement(
          'div',
          {
            style: fixedStyle,
            className: cn(baseClassNames, mergedClassNames, 'md-table-column__fixed--flex', {
              'md-table-column__fixed--flex-right': numeric
            }, fixedClassName)
          },
          tooltip,
          displayedChildren
        )
      );
    }

    return React.createElement(
      Component,
      _extends({
        'aria-sort': ariaSort
      }, props, {
        scope: scope,
        className: cn('md-table-column', {
          'md-table-column--fixed': fixed,
          'md-text-left': !numeric && !fixed,
          'md-text-right': numeric && !fixed
        }, mergedClassNames)
      }),
      !fixedHeader && !fixedFooter && tooltip,
      displayedChildren
    );
  };

  return TableColumn;
}(PureComponent);

TableColumn.propTypes = {
  /**
   * An optional style to apply.
   */
  style: PropTypes.object,

  /**
   * The optional className for the table column
   */
  className: PropTypes.string,

  /**
   * An optional style to apply to the surrounding div when the DataTable has been
   * set to include a fixed header or a fixed footer.
   */
  fixedStyle: PropTypes.object,

  /**
   * An optional className to apply to the surrounding div when the DataTable has been
   * set to include a fixed header or a fixed footer.
   */
  fixedClassName: PropTypes.string,

  /**
   * The children to display in the column.
   */
  children: PropTypes.node,

  /**
   * Boolean if the column is currently sorted. If this prop is not `undefined`,
   * it will add the sort icon unto this column. You will also need to use the
   * `onClick` function to toggle the `sorted` prop as well as handling the sorting
   * of data.
   *
   * This value should really only be set in the `TableHeader` component.
   */
  sorted: PropTypes.bool,

  /**
   * The icon to show when a column is sortable.
   */
  sortIcon: PropTypes.element,

  /**
   * Boolean if the sortIcon should appear before the text in the column.
   */
  sortIconBefore: PropTypes.bool,

  /**
   * A boolean if the column has numeric data. It will right-align the data.
   */
  numeric: PropTypes.bool,

  /**
   * Boolean if the table column should gain the `.md-data-table--adjusted` class name. By default,
   * every column will gain this class name unless it is an `EditDialogColumn`, a `SelectFieldColumn`,
   * or the `grow` prop is enabled.
   */
  adjusted: PropTypes.bool,

  /**
   * Boolean if the column should expand to fill any remaining width in the container. There should
   * really only be one column with the `grow` prop enabled. In addition, it should really only be
   * applied to one of the columns in the TableHeader.
   */
  grow: PropTypes.bool,

  /**
   * Boolean if this column is the `th` for a column of `SelectFieldColumn`. This will apply
   * additional styling to the column to position with the select field.
   */
  selectColumnHeader: PropTypes.bool,

  /**
   * Boolean if this is a `th` component. This value **should** be set
   * automatically for you if it is in the `TableHeader` component.
   */
  header: PropTypes.bool.isRequired,

  /**
   * The optional tooltip to render on hover.
   */
  tooltipLabel: PropTypes.node,

  /**
   * An optional delay to apply to the tooltip before it appears.
   */
  tooltipDelay: PropTypes.number,

  /**
   * The position of the tooltip.
   */
  tooltipPosition: PropTypes.oneOf(['top', 'right', 'bottom', 'left']),

  /**
   * The injected tooltip.
   * @access private
   */
  tooltip: PropTypes.node,

  /**
   * Boolean if the `TableColumn` should gain the `plain` styles. This means that the text
   * in the column can wrap and there is no height limit enforced with some additional padding.
   */
  plain: PropTypes.bool,

  /**
   * An optional scope to apply to the table column. If omitted, the scope will be set to
   * `'col'` if inside of the `TableHeader` component. This is really only needed for
   * header columns.
   */
  scope: PropTypes.oneOf(['row', 'col']),

  /**
   * This is injected by the `TableRow` component to help with generating ids
   * @access private
   */
  cellIndex: PropTypes.number,
  sortIconChildren: deprecated(PropTypes.node, 'Use the `sortIcon` prop instead'),
  sortIconClassName: deprecated(PropTypes.string, 'Use the `sortIcon` prop instead')
};
TableColumn.defaultProps = {
  header: false,
  adjusted: true,
  sortIcon: React.createElement(
    FontIcon,
    null,
    'arrow_upward'
  ),
  sortIconBefore: true
};
TableColumn.contextTypes = {
  plain: PropTypes.bool,
  footer: PropTypes.bool,
  fixedHeader: PropTypes.bool,
  fixedFooter: PropTypes.bool
};


export default injectTooltip(TableColumn);