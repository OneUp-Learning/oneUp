var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import { findDOMNode } from 'react-dom';
import PropTypes from 'prop-types';

import getField from '../utils/getField';
import fixedToShape from '../Helpers/fixedToShape';
import findTable from './findTable';
import findFixedTo from './findFixedTo';
import getDisplayName from '../utils/StringUtils/getDisplayName';

/**
 * This is a utility HOC to fix the components that use the `Menu` component behind the scenes. This will
 * correctly add the `id` and `fixedTo` props if they are omitted from the child component's props.
 *
 * If the id prop is omitted, it will default to the `${rowId}-${cellIndex}-${suffix}` and when the
 * `fixedTo` prop is omitted, it will automatically set it to the responsive table wrapper so that
 * it will stay in viewport as expected.
 *
 * This component also attempts to find the `cellIndex` prop if it is not correctly cloned into the
 * component.
 *
 * @param {function|Class} ComposedComponent - the component to compose with the tooltip functionality.
 * @param {String} suffix - the id suffix to apply.
 * @return {Class} the ComposedComponent with some fixes applied.
 */
export default function withTableFixes(ComposedComponent, suffix) {
  var _class, _temp2;

  return _temp2 = _class = function (_PureComponent) {
    _inherits(TableFixesComponent, _PureComponent);

    function TableFixesComponent() {
      var _temp, _this, _ret;

      _classCallCheck(this, TableFixesComponent);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.state = { cellIndex: undefined }, _this._fixedTo = null, _temp), _possibleConstructorReturn(_this, _ret);
    }

    TableFixesComponent.prototype.componentDidMount = function componentDidMount() {
      var _props = this.props,
          cellIndex = _props.cellIndex,
          fixedTo = _props.fixedTo,
          id = _props.id;

      var isIndexed = !!id || cellIndex === 0 || !!cellIndex;
      var isFixed = fixedTo === null || !!fixedTo;
      if (isIndexed && isFixed) {
        // all is good
        return;
      }

      var column = findDOMNode(this);
      var table = findTable(column);
      this._fixedTo = findFixedTo(table);

      // If a developer creates their own component to wrap the component that uses a menu, the cellIndex prop
      // might not be defined if they don't pass ...props
      if (!isIndexed) {
        var columns = [].slice.call(column.parentNode.querySelectorAll('th,td'));
        this.setState({ cellIndex: columns.indexOf(column) }); // eslint-disable-line react/no-did-mount-set-state
      } else if (this._fixedTo) {
        // need to apply the _fixedTo for the select field
        this.forceUpdate();
      }
    };

    TableFixesComponent.prototype.render = function render() {
      var rowId = this.context.rowId;

      var _props2 = this.props,
          propid = _props2.id,
          propFixedTo = _props2.fixedTo,
          propCellIndex = _props2.cellIndex,
          props = _objectWithoutProperties(_props2, ['id', 'fixedTo', 'cellIndex']);

      var id = this.props.id;

      var fixedTo = this._fixedTo === null || propFixedTo ? propFixedTo : this._fixedTo;
      var cellIndex = getField(this.props, this.state, 'cellIndex');
      if (!id) {
        id = rowId + '-' + cellIndex + '-' + suffix;
      }

      return React.createElement(ComposedComponent, _extends({}, props, { id: id, fixedTo: fixedTo }));
    };

    return TableFixesComponent;
  }(PureComponent), _class.Positions = ComposedComponent.Positions, _class.HorizontalAnchors = ComposedComponent.HorizontalAnchors, _class.VerticalAnchors = ComposedComponent.VerticalAnchors, _class.displayName = getDisplayName(ComposedComponent, 'TableFixes'), _class.propTypes = {
    id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
    cellIndex: PropTypes.number,
    fixedTo: fixedToShape
  }, _class.contextTypes = {
    rowId: PropTypes.oneOfType([PropTypes.number, PropTypes.string])
  }, _temp2;
}