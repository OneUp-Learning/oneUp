var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import SelectionControl from '../SelectionControls/SelectionControl';

import findTable from './findTable';

var TableCheckbox = function (_Component) {
  _inherits(TableCheckbox, _Component);

  function TableCheckbox() {
    var _temp, _this, _ret;

    _classCallCheck(this, TableCheckbox);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this._td = null, _this._header = false, _this._handleMount = function (td) {
      if (td) {
        var header = findTable(td).querySelector('thead');
        var index = td.parentNode.rowIndex - (header ? 1 : 0);

        if (td.parentNode.parentNode.tagName === 'TBODY') {
          _this.context.createCheckbox(index);
        }
        _this._td = td;
        _this._header = header;
      } else if (_this._td) {
        var _index = _this._td.parentNode.rowIndex;
        _this.context.removeCheckbox(_index - (_this._header ? 1 : 0));
        _this._td = null;
        _this._header = false;
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  TableCheckbox.prototype.render = function render() {
    var _props = this.props,
        checked = _props.checked,
        index = _props.index,
        props = _objectWithoutProperties(_props, ['checked', 'index']);

    var _context = this.context,
        checkedIcon = _context.checkedIcon,
        uncheckedIcon = _context.uncheckedIcon,
        indeterminateIcon = _context.indeterminateIcon,
        indeterminate = _context.indeterminate,
        header = _context.header,
        footer = _context.footer,
        rowId = _context.rowId,
        baseName = _context.baseName,
        checkboxHeaderLabel = _context.checkboxHeaderLabel,
        checkboxLabelTemplate = _context.checkboxLabelTemplate;


    var Cell = header ? 'th' : 'td';
    var label = void 0;
    if (header) {
      label = checkboxHeaderLabel;
    } else if (typeof checkboxLabelTemplate === 'function') {
      label = checkboxLabelTemplate(index);
    } else {
      label = checkboxLabelTemplate.replace(/{{row}}/g, index);
    }

    var content = React.createElement(SelectionControl, _extends({}, props, {
      id: rowId,
      name: baseName + '-checkbox',
      type: 'checkbox',
      checked: checked,
      checkedCheckboxIcon: checkedIcon,
      uncheckedCheckboxIcon: header && indeterminate ? indeterminateIcon : uncheckedIcon,
      'aria-label': label
    }));
    var fixedHeader = header && this.context.fixedHeader;
    var fixedFooter = footer && this.context.fixedFooter;

    if (fixedHeader) {
      content = React.createElement(
        'div',
        {
          className: cn('md-table-column__fixed', {
            'md-table-column__fixed--header': fixedHeader,
            'md-table-column__fixed--footer': fixedFooter
          })
        },
        React.cloneElement(content, {
          className: cn({
            'md-table-checkbox--header': header,
            'md-table-checkbox--footer': footer
          })
        })
      );
    }

    return React.createElement(
      Cell,
      {
        className: cn('md-table-checkbox', {
          'md-table-column--fixed': fixedHeader
        }),
        scope: header ? 'col' : undefined,
        ref: this._handleMount
      },
      content
    );
  };

  return TableCheckbox;
}(Component);

TableCheckbox.propTypes = {
  index: PropTypes.number,
  checked: PropTypes.bool
};
TableCheckbox.contextTypes = {
  rowId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,
  baseName: PropTypes.string.isRequired,
  indeterminate: PropTypes.bool,
  checkedIcon: PropTypes.element,
  uncheckedIcon: PropTypes.element,
  indeterminateIcon: PropTypes.element,
  checkboxHeaderLabel: PropTypes.string.isRequired,
  checkboxLabelTemplate: PropTypes.oneOfType([PropTypes.func, PropTypes.string]).isRequired,
  createCheckbox: PropTypes.func.isRequired,
  removeCheckbox: PropTypes.func.isRequired,
  header: PropTypes.bool,
  footer: PropTypes.bool,
  fixedHeader: PropTypes.bool.isRequired,
  fixedFooter: PropTypes.bool.isRequired
};
export default TableCheckbox;