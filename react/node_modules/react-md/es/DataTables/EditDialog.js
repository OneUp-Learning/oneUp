var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';

import themeColors from '../utils/themeColors';
import AccessibleFakeButton from '../Helpers/AccessibleFakeButton';
import Layover from '../Helpers/Layover';
import Dialog from '../Dialogs/Dialog';

var EditDialog = function (_PureComponent) {
  _inherits(EditDialog, _PureComponent);

  function EditDialog() {
    _classCallCheck(this, EditDialog);

    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
  }

  EditDialog.prototype.render = function render() {
    var _props = this.props,
        id = _props.id,
        dialogStyle = _props.dialogStyle,
        dialogClassName = _props.dialogClassName,
        dialogContentStyle = _props.dialogContentStyle,
        dialogContentClassName = _props.dialogContentClassName,
        textFieldId = _props.textFieldId,
        visible = _props.visible,
        header = _props.header,
        onOpen = _props.onOpen,
        children = _props.children,
        label = _props.label,
        title = _props.title,
        large = _props.large,
        actions = _props.actions,
        placeholder = _props.placeholder,
        dialogZDepth = _props.dialogZDepth,
        props = _objectWithoutProperties(_props, ['id', 'dialogStyle', 'dialogClassName', 'dialogContentStyle', 'dialogContentClassName', 'textFieldId', 'visible', 'header', 'onOpen', 'children', 'label', 'title', 'large', 'actions', 'placeholder', 'dialogZDepth']);

    var field = React.createElement(
      AccessibleFakeButton,
      {
        className: cn('md-edit-dialog__label', {
          'md-edit-dialog__header': header
        }, themeColors({ hint: placeholder || header })),
        noFocusOutline: visible,
        onClick: onOpen,
        onFocus: onOpen
      },
      label
    );

    return React.createElement(
      Layover,
      _extends({}, props, {
        id: id + '-layover',
        toggle: field,
        visible: visible,
        block: true,
        belowAnchor: null
      }),
      React.createElement(
        Dialog,
        {
          id: id,
          'aria-labelledby': !large ? textFieldId : undefined,
          style: dialogStyle,
          className: cn('md-edit-dialog', themeColors({ background: true, themeText: false }), dialogClassName),
          contentStyle: dialogContentStyle,
          contentClassName: cn('md-edit-dialog__content', dialogContentClassName),
          title: large ? title : null,
          focusOnMount: true,
          containFocus: !!large,
          paddedContent: false,
          actions: large ? actions : null,
          zDepth: dialogZDepth
        },
        children
      )
    );
  };

  return EditDialog;
}(PureComponent);

EditDialog.propTypes = {
  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  textFieldId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  style: PropTypes.object,
  className: PropTypes.string,
  dialogStyle: PropTypes.object,
  dialogClassName: PropTypes.string,
  dialogContentStyle: PropTypes.object,
  dialogContentClassName: PropTypes.string,
  children: PropTypes.node,
  onOpen: PropTypes.func.isRequired,
  onClose: PropTypes.func.isRequired,
  visible: PropTypes.bool.isRequired,
  label: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,
  placeholder: PropTypes.bool,
  title: PropTypes.node,
  large: PropTypes.bool,
  actions: Dialog.propTypes.actions,
  dialogZDepth: PropTypes.number,
  header: PropTypes.bool
};
export default EditDialog;