var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import deprecated from 'react-prop-types/lib/deprecated';

import fixedToShape from '../Helpers/fixedToShape';
import positionShape from '../Helpers/positionShape';
import SelectField from '../SelectFields/SelectField';
import withTableFixes from './withTableFixes';
import TableColumn from './TableColumn';

/**
 * The `SelectFieldColumn` component is just a simple wrapper between a `SelectField` and
 * the `TableColumn` components.
 *
 * All props that are on the `SelectField` are also available here (except the naming of style or className).
 * See the [SelectField](/components/select-fields?tab=1#select-field-proptypes) for remaining prop descriptions.
 */

var SelectFieldColumn = function (_PureComponent) {
  _inherits(SelectFieldColumn, _PureComponent);

  function SelectFieldColumn() {
    _classCallCheck(this, SelectFieldColumn);

    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
  }

  SelectFieldColumn.prototype.render = function render() {
    var _props = this.props,
        style = _props.style,
        className = _props.className,
        menuStyle = _props.menuStyle,
        menuClassName = _props.menuClassName,
        header = _props.header,
        tooltipLabel = _props.tooltipLabel,
        tooltipDelay = _props.tooltipDelay,
        tooltipPosition = _props.tooltipPosition,
        adjusted = _props.adjusted,
        wrapperStyle = _props.wrapperStyle,
        wrapperClassName = _props.wrapperClassName,
        props = _objectWithoutProperties(_props, ['style', 'className', 'menuStyle', 'menuClassName', 'header', 'tooltipLabel', 'tooltipDelay', 'tooltipPosition', 'adjusted', 'wrapperStyle', 'wrapperClassName']);

    return React.createElement(
      TableColumn,
      {
        header: header,
        style: style,
        className: cn('md-select-field-column', className),
        adjusted: false,
        tooltipLabel: tooltipLabel,
        tooltipDelay: tooltipDelay,
        tooltipPosition: tooltipPosition
      },
      React.createElement(SelectField, _extends({}, props, { style: menuStyle, className: menuClassName }))
    );
  };

  return SelectFieldColumn;
}(PureComponent);

SelectFieldColumn.VerticalAnchors = SelectField.VerticalAnchors;
SelectFieldColumn.HorizontalAnchors = SelectField.HorizontalAnchors;
SelectFieldColumn.Positions = SelectField.Positions;
SelectFieldColumn.propTypes = {
  /**
   * An optional id to use for the select field in the column. If this is omitted, it's value will be
   * `${rowId}-${cellIndex}-select-field`
   */
  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),

  /**
   * This is the optional style to apply to the `TableColumn`.
   */
  style: PropTypes.object,

  /**
   * This is the optional className to apply to the `TableColumn`.
   */
  className: PropTypes.string,

  /**
   * The is the optional style to apply to the select field's menu container.
   *
   * @see {@link SelectFields/SelectField#style}
   */
  menuStyle: PropTypes.object,

  /**
   * The is the optional class name to apply to the select field's menu container.
   *
   * @see {@link SelectFields/SelectField#className}
   */
  menuClassName: PropTypes.string,

  /**
   * This is how the select field should be fixed within the table. When this is omitted,
   * it will automatically use the responsive table as the fixture so that the select field
   * will close/adjust itself to the scrolling of the table.
   *
   * @see {@link Helpers/Layover#fixedTo}
   */
  fixedTo: fixedToShape,

  /**
   * Boolean if the select field should span the entire width of the column.
   */
  fullWidth: PropTypes.bool,

  /**
   * The position for the select field.
   *
   * @see {@link SelectFields/SelectField#position}
   */
  position: positionShape,

  /**
   * This is injected by the `TableRow` component.
   * @access private
   */
  header: PropTypes.bool,

  /**
   * @access private
   */
  adjusted: PropTypes.bool,

  /**
   * The optional tooltip to render on hover.
   *
   * @see {@link DataTables/TableColumn#tooltipLabel}
   */
  tooltipLabel: PropTypes.string,

  /**
   * An optional delay to apply to the tooltip before it appears.
   *
   * @see {@link DataTables/TableColumn#tooltipDelay}
   */
  tooltipDelay: PropTypes.number,

  /**
   * The position of the tooltip.
   *
   * @see {@link DataTables/TableColumn#tooltipPosition}
   */
  tooltipPosition: PropTypes.oneOf(['top', 'right', 'bottom', 'left']),

  /**
   * Boolean if the menu should automatically try to reposition itself to stay within
   * the viewport when the `fixedTo` element scrolls.
   *
   * @see {@link Helpers/Layover#repositionOnScroll}
   */
  repositionOnScroll: PropTypes.bool,

  /**
   * Boolean if the menu should automatically try to reposition itself to stay within
   * the viewport when the window resizes.
   *
   * @see {@link Helpers/Layover#repositionOnResize}
   */
  repositionOnResize: PropTypes.bool,

  /**
   * Boolean if the menu logic should be simplified without any viewport logic and position
   * based on the relative position of the menu. This will most like require some additional
   * styles applied to the menu.
   *
   * @see {@link Helpers/Layover#simplified}
   */
  simplifiedMenu: PropTypes.bool,

  wrapperStyle: deprecated(PropTypes.object, 'There is no longer a wrapper'),
  wrapperClassName: deprecated(PropTypes.string, 'There is no longer a wrapper')
};
SelectFieldColumn.defaultProps = {
  position: SelectFieldColumn.Positions.BELOW,
  fullWidth: true,
  repositionOnScroll: true,
  repositionOnResize: false,
  simplifiedMenu: false
};


export default withTableFixes(SelectFieldColumn, 'select-field');