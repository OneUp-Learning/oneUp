var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component, Children } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';

import contextTypes from './contextTypes';

/**
 * The `TableBody` component is used for managing the state of all
 * `TableRow` inside of it.
 */

var TableBody = function (_Component) {
  _inherits(TableBody, _Component);

  function TableBody() {
    _classCallCheck(this, TableBody);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  TableBody.prototype.render = function render() {
    var _props = this.props,
        children = _props.children,
        className = _props.className,
        props = _objectWithoutProperties(_props, ['children', 'className']);

    var selectedRows = this.context.selectedRows;


    var rows = children ? Children.map(Children.toArray(children), function (row, i) {
      var uncontrolled = typeof row.props.selected === 'undefined';
      return React.cloneElement(row, {
        selected: uncontrolled ? selectedRows[i] : row.props.selected
      });
    }) : null;

    return React.createElement(
      'tbody',
      _extends({}, props, { className: cn('md-table-body', className) }),
      rows
    );
  };

  return TableBody;
}(Component);

TableBody.propTypes = {
  /**
   * An optional style to apply to the tbody.
   */
  style: PropTypes.object,

  /**
   * An optional className to apply to the tbody.
   */
  className: PropTypes.string,

  /**
   * A list or a single item of `TableRow` components to render.
   */
  children: PropTypes.oneOfType([PropTypes.element, PropTypes.arrayOf(PropTypes.element)])
};
TableBody.contextTypes = contextTypes;
export default TableBody;