var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent, Children, cloneElement } from 'react';
import PropTypes from 'prop-types';
import CSSTransitionGroup from 'react-transition-group/CSSTransitionGroup';
import cn from 'classnames';

import TICK from '../constants/CSSTransitionGroupTick';
import oneRequired from '../utils/PropTypes/oneRequired';
import invalidIf from '../utils/PropTypes/invalidIf';
import CardTitleBlock from '../Cards/CardTitleBlock';

/**
 * The `TableCardHeader` is used when contextual actions should appear when
 * a user selects a row.
 */

var TableCardHeader = function (_PureComponent) {
  _inherits(TableCardHeader, _PureComponent);

  function TableCardHeader(props) {
    _classCallCheck(this, TableCardHeader);

    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

    _this.state = { animating: false };
    return _this;
  }

  TableCardHeader.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var _this2 = this;

    var visible = this.props.visible;
    var nVisible = nextProps.visible,
        transitionEnterTimeout = nextProps.transitionEnterTimeout,
        transitionLeaveTimeout = nextProps.transitionLeaveTimeout;

    var timeout = !nVisible ? transitionLeaveTimeout : transitionEnterTimeout;
    if (visible !== nVisible) {
      if (this._timeout) {
        clearTimeout(this._timeout);
      }

      this._timeout = setTimeout(function () {
        _this2._timeout = setTimeout(function () {
          _this2._timeout = null;
          _this2.setState({ animating: false });
        }, timeout);
      }, TICK);

      if (!this.state.animating) {
        this.setState({ animating: true });
      }
    }
  };

  TableCardHeader.prototype._cloneCellRight = function _cloneCellRight(noAdjust, children) {
    if (noAdjust || !children) {
      return children;
    }

    return Children.map(Children.toArray(children), function (child, i) {
      if (i === 0) {
        return cloneElement(child, { className: cn('md-cell--right', child.props.className) });
      }

      return child;
    });
  };

  TableCardHeader.prototype._cloneLeftChildren = function _cloneLeftChildren(noClone, children) {
    if (noClone || !children) {
      return children;
    }

    return Children.map(Children.toArray(children), function (child) {
      return cloneElement(child, {
        className: cn('md-btn--dialog', child.props.className)
      });
    });
  };

  TableCardHeader.prototype.render = function render() {
    var animating = this.state.animating;

    var _props = this.props,
        style = _props.style,
        className = _props.className,
        title = _props.title,
        titleId = _props.titleId,
        actions = _props.actions,
        contextualTitleId = _props.contextualTitleId,
        contextualChildren = _props.contextualChildren,
        noActionsAdjust = _props.noActionsAdjust,
        noChildrenAdjust = _props.noChildrenAdjust,
        noLeftChildrenClone = _props.noLeftChildrenClone,
        visible = _props.visible,
        propChildren = _props.children,
        propLeftChildren = _props.leftChildren,
        propContextualTitle = _props.contextualTitle,
        props = _objectWithoutProperties(_props, ['style', 'className', 'title', 'titleId', 'actions', 'contextualTitleId', 'contextualChildren', 'noActionsAdjust', 'noChildrenAdjust', 'noLeftChildrenClone', 'visible', 'children', 'leftChildren', 'contextualTitle']);

    var _props2 = this.props,
        children = _props2.children,
        leftChildren = _props2.leftChildren,
        contextualTitle = _props2.contextualTitle;

    children = this._cloneCellRight(noChildrenAdjust, children);
    leftChildren = this._cloneLeftChildren(noLeftChildrenClone, leftChildren);

    if (title) {
      children = React.createElement(
        'div',
        { className: 'md-card-title', key: 'main-title' },
        React.createElement(CardTitleBlock, { id: titleId, title: title }),
        children
      );
    } else if (leftChildren) {
      leftChildren = Children.toArray(leftChildren);

      if (children) {
        children = leftChildren.concat(Children.toArray(children));
      } else {
        children = leftChildren;
      }
    }

    if (contextualTitle) {
      contextualTitle = React.createElement(
        'h2',
        {
          id: contextualTitleId,
          className: 'md-card-title--title md-card-title--title-contextual',
          tabIndex: contextualTitleId ? -1 : null
        },
        contextualTitle
      );
    }

    var contextualHeader = React.createElement(
      'div',
      { key: 'contextual-header', className: 'md-card-title md-card-title--contextual' },
      contextualTitle,
      contextualChildren,
      this._cloneCellRight(noActionsAdjust, actions)
    );

    var mergedStyles = style;
    if (animating) {
      mergedStyles = Object.assign({}, style, { overflow: 'hidden' });
    }

    return React.createElement(
      CSSTransitionGroup,
      _extends({}, props, {
        style: mergedStyles,
        className: cn('md-table-card-header', {
          'md-table-card-header--no-title': !title
        }, className)
      }),
      children,
      visible ? contextualHeader : null
    );
  };

  return TableCardHeader;
}(PureComponent);

TableCardHeader.propTypes = {
  /**
   * An optional style to apply.
   */
  style: PropTypes.object,

  /**
   * An optional className to apply.
   */
  className: PropTypes.string,

  /**
   * The component to render as.
   */
  component: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object]).isRequired,

  /**
   * The transition name to use when the contextual header appears.
   */
  transitionName: PropTypes.string.isRequired,

  /**
   * The transition time to use when the contextual header appears.
   */
  transitionEnterTimeout: PropTypes.number.isRequired,

  /**
   * The transition time to use when the contextual header disappears.
   */
  transitionLeaveTimeout: PropTypes.number.isRequired,

  /**
   * An optional title to display. It is invalid to have both `title` and `leftChildren`
   * defined as only one will be used.
   */
  title: oneRequired(PropTypes.node, 'leftChildren', 'children'),

  /**
   * An optional id to provide to the title.
   */
  titleId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),

  /**
   * An optional title to display in the contextual header. This will get wrapped in an `h2`
   * tag and additional styles applied.
   */
  contextualTitle: PropTypes.node,

  /**
   * An optional id to provide to the contextual title.
   */
  contextualTitleId: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),

  /**
   * Any additional children to display in the contextual header. This will be displayed after
   * the optional `contextualTile` and before the `actions`.
   */
  contextualChildren: PropTypes.node,

  /**
   * An optional button or list of buttons to display instead of a title.
   */
  leftChildren: invalidIf(PropTypes.oneOfType([PropTypes.element, PropTypes.arrayOf(PropTypes.element)]), 'title'),

  /**
   * An additional children to display after the `title` or `leftChildren` prop.
   * This is _normally_ a list of icon button or menu button.
   */
  children: PropTypes.oneOfType([PropTypes.element, PropTypes.arrayOf(PropTypes.element)]),

  /**
   * An optional button/menu button or a list of button/menu button to display in the
   * contextual header once the user has selected a row or multiple rows.
   */
  actions: PropTypes.oneOfType([PropTypes.element, PropTypes.arrayOf(PropTypes.element)]),

  /**
   * Boolean if the `actions` prop should not have each element cloned with additional
   * class names.
   */
  noActionsAdjust: PropTypes.bool,

  /**
   * Boolean if the `children` prop should not have each element cloned with additional
   * class names.
   */
  noChildrenAdjust: PropTypes.bool,

  /**
   * Boolean if the `leftChildren` prop should not have each element cloned with additional
   * class names.
   */
  noLeftChildrenClone: PropTypes.bool,

  /**
   * Boolean if the contextual header is currently visible.
   */
  visible: PropTypes.bool.isRequired
};
TableCardHeader.defaultProps = {
  component: 'header',
  transitionName: 'md-drop-down',
  transitionEnterTimeout: 150,
  transitionLeaveTimeout: 150
};
export default TableCardHeader;