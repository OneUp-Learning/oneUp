function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import Portal from '../Helpers/Portal';

var Overlay = function (_PureComponent) {
  _inherits(Overlay, _PureComponent);

  function Overlay() {
    _classCallCheck(this, Overlay);

    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
  }

  Overlay.prototype.getChildContext = function getChildContext() {
    // Always want the overlay to render in a separate subtree until 1.1.0
    return { isInPortal: false };
  };

  Overlay.prototype.render = function render() {
    var _props = this.props,
        active = _props.active,
        visible = _props.visible,
        renderNode = _props.renderNode,
        onClick = _props.onClick,
        style = _props.style,
        className = _props.className;

    return React.createElement(
      Portal,
      { visible: visible, renderNode: renderNode },
      React.createElement('div', {
        style: style,
        className: cn('md-overlay md-overlay--drawer md-pointer--hover', {
          'md-overlay--active': active
        }, className),
        onClick: onClick
      })
    );
  };

  return Overlay;
}(PureComponent);

Overlay.propTypes = {
  style: PropTypes.object,
  className: PropTypes.string,
  active: PropTypes.bool,
  visible: PropTypes.bool.isRequired,
  renderNode: PropTypes.object,
  onClick: PropTypes.func
};
Overlay.childContextTypes = {
  isInPortal: PropTypes.bool
};
export default Overlay;