var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import deprecated from 'react-prop-types/lib/deprecated';

import FontIcon from '../FontIcons/FontIcon';

var Chip = function (_PureComponent) {
  _inherits(Chip, _PureComponent);

  function Chip() {
    var _temp, _this, _ret;

    _classCallCheck(this, Chip);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.state = { hover: false }, _this._handleMouseEnter = function (e) {
      if (_this.props.onMouseEnter) {
        _this.props.onMouseEnter(e);
      }

      _this.setState({ hover: true });
    }, _this._handleMouseLeave = function (e) {
      if (_this.props.onMouseLeave) {
        _this.props.onMouseLeave(e);
      }

      _this.setState({ hover: false });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  Chip.prototype.render = function render() {
    var hover = this.state.hover;

    var _props = this.props,
        label = _props.label,
        className = _props.className,
        labelStyle = _props.labelStyle,
        labelClassName = _props.labelClassName,
        avatar = _props.avatar,
        children = _props.children,
        removable = _props.removable,
        remove = _props.remove,
        onClick = _props.onClick,
        rotateIcon = _props.rotateIcon,
        iconClassName = _props.iconClassName,
        removeIconChildren = _props.removeIconChildren,
        removeIconClassName = _props.removeIconClassName,
        props = _objectWithoutProperties(_props, ['label', 'className', 'labelStyle', 'labelClassName', 'avatar', 'children', 'removable', 'remove', 'onClick', 'rotateIcon', 'iconClassName', 'removeIconChildren', 'removeIconClassName']);

    var icon = void 0;
    if (removable || remove) {
      var chipIconCN = cn('md-chip-icon', {
        'md-chip-icon--rotate': rotateIcon,
        'md-chip-text--hover': hover
      });

      if (React.isValidElement(children)) {
        icon = React.Children.only(children);
        icon = React.cloneElement(icon, { className: cn(chipIconCN, icon.props.className) });
      } else {
        icon = React.createElement(
          FontIcon,
          { className: chipIconCN, iconClassName: iconClassName },
          children
        );
      }
    }

    return React.createElement(
      'button',
      _extends({
        type: 'button'
      }, props, {
        className: cn('md-chip', {
          'md-chip--avatar': avatar,
          'md-chip--remove': removable,
          'md-chip--hover': hover
        }, className),
        onClick: remove || onClick,
        onMouseEnter: this._handleMouseEnter,
        onMouseLeave: this._handleMouseLeave
      }),
      avatar,
      React.createElement(
        'span',
        {
          style: labelStyle,
          className: cn('md-chip-text', {
            'md-chip-text--hover': hover
          }, labelClassName)
        },
        label
      ),
      icon
    );
  };

  return Chip;
}(PureComponent);

Chip.propTypes = {
  /**
   * An optional style to apply.
   */
  style: PropTypes.object,

  /**
   * An optional className to apply.
   */
  className: PropTypes.string,

  /**
   * An optional style to apply to the chip's label.
   */
  labelStyle: PropTypes.object,

  /**
   * An optional className to apply to the chip's label.
   */
  labelClassName: PropTypes.string,

  /**
   * Boolean if the `.md-chip-icon--rotate` style should be applied to the remove icon.
   * The `.md-chip-icon--rotate` just rotates the icon 45 degrees.
   */
  rotateIcon: PropTypes.bool,

  /**
   * Any children used to display the remove icon when `removable`.
   */
  children: PropTypes.node,

  /**
   * The label to display on the chip.
   */
  label: PropTypes.node.isRequired,

  /**
   * Boolean if the chip is removable.
   */
  removable: PropTypes.bool,

  /**
   * An optional avatar to display on the chip.
   */
  avatar: PropTypes.element,

  /**
   * An optional function to call when the `click` event is triggered.
   */
  onClick: PropTypes.func,

  /**
   * An optional function to call when the `mouseenter` event is triggered.
   */
  onMouseEnter: PropTypes.func,

  /**
   * An optional function to call when the `mouseleave` event is triggered.
   */
  onMouseLeave: PropTypes.func,

  iconClassName: deprecated(PropTypes.string, 'Use the `children` prop as a single FontIcon or SVGIcon instead'),
  remove: deprecated(PropTypes.func, 'Use `removable` and `onClick` instead'),
  removeIconChildren: deprecated(PropTypes.node, 'Use `children` instead'),
  removeIconClassName: deprecated(PropTypes.string, 'Use `children` prop as a single FontIcon or SVGIcon instead')
};
Chip.defaultProps = {
  rotateIcon: true,
  children: React.createElement(
    FontIcon,
    null,
    'add_circle'
  )
};
export default Chip;