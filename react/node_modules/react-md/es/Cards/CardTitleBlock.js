function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';

import themeColors from '../utils/themeColors';

var CardTitleBlock = function (_PureComponent) {
  _inherits(CardTitleBlock, _PureComponent);

  function CardTitleBlock() {
    _classCallCheck(this, CardTitleBlock);

    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
  }

  CardTitleBlock.prototype.render = function render() {
    var _props = this.props,
        id = _props.id,
        subtitle = _props.subtitle,
        avatar = _props.avatar;
    var title = this.props.title;

    title = React.createElement(
      'h2',
      {
        id: id,
        className: cn('md-card-title--title', {
          'md-card-title--large': !avatar
        }, themeColors({ text: true })),
        tabIndex: id ? -1 : null
      },
      title
    );

    if (!subtitle) {
      return title;
    }

    return React.createElement(
      'div',
      {
        className: cn('md-card-title--title-block', {
          'md-card-title--one-line': avatar
        })
      },
      title,
      React.createElement(
        'h3',
        { className: 'md-card-title--title ' + themeColors({ hint: true }) },
        subtitle
      )
    );
  };

  return CardTitleBlock;
}(PureComponent);

CardTitleBlock.propTypes = {
  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  title: PropTypes.node.isRequired,
  subtitle: PropTypes.node,
  avatar: PropTypes.bool
};
export default CardTitleBlock;