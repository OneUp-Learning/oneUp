var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component, Children, cloneElement } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import deprecated from 'react-prop-types/lib/deprecated';

import CardTitleBlock from './CardTitleBlock';
import CardExpander from './CardExpander';

/**
 * The `CardTitle` component is used to render a title in a Card along
 * with an optional subtitle or avatar.
 */

var CardTitle = function (_Component) {
  _inherits(CardTitle, _Component);

  function CardTitle() {
    _classCallCheck(this, CardTitle);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  CardTitle.prototype.render = function render() {
    var _props = this.props,
        id = _props.id,
        style = _props.style,
        className = _props.className,
        title = _props.title,
        subtitle = _props.subtitle,
        expander = _props.expander,
        isExpander = _props.isExpander,
        children = _props.children,
        propAvatar = _props.avatar,
        props = _objectWithoutProperties(_props, ['id', 'style', 'className', 'title', 'subtitle', 'expander', 'isExpander', 'children', 'avatar']);

    var avatar = this.props.avatar;

    if (avatar) {
      var avatarClassName = Children.only(avatar).props.className;

      avatar = cloneElement(avatar, {
        className: cn('md-avatar--card', avatarClassName)
      });
    }
    return React.createElement(
      'div',
      _extends({}, props, {
        style: style,
        className: cn('md-card-title', {
          'md-card-title--primary': !avatar
        }, className)
      }),
      avatar,
      React.createElement(CardTitleBlock, { id: id, title: title, subtitle: subtitle, avatar: !!avatar }),
      children,
      isExpander || expander && React.createElement(CardExpander, null)
    );
  };

  return CardTitle;
}(Component);

CardTitle.propTypes = {
  /**
   * An optional id to add to the `title`.
   */
  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),

  /**
   * An optional style to apply.
   */
  style: PropTypes.object,

  /**
   * An optional className to apply.
   */
  className: PropTypes.string,

  /**
   * The title to display.
   */
  title: PropTypes.node.isRequired,

  /**
   * An optional subtitle to display.
   */
  subtitle: PropTypes.node,

  /**
   * Any additional children to display in the title block
   * after the avatar, title, and subtitle.
   */
  children: PropTypes.node,

  /**
   * An optional avatar to display before the title and subtitle.
   */
  avatar: PropTypes.element,

  /**
   * Boolean if the `CardTitle` component should inject a button
   * for expanding all children below it.
   */
  expander: PropTypes.bool,

  isExpander: deprecated(PropTypes.bool, 'Use `expander` instead')
};
export default CardTitle;