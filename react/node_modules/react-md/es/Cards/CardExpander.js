function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';

import contextTypes from './contextTypes';
import Button from '../Buttons/Button';
import getCollapserStyles from '../utils/getCollapserStyles';

/**
 * The CardExpander component is just a simple `IconButton` that
 * gets generated through the `Card`'s `contextTypes`. Props are not used
 * at all.
 *
 * Any component below a component that has this component inject into it
 * and has the prop `expandable={true}` will be toggleable when this is clicked.
 *
 * You can manually inject the `CardExpander` component yourself if you want to
 * use a component that is not a `CardActions` or a `CardTitle`.
 */

var CardExpander = function (_Component) {
  _inherits(CardExpander, _Component);

  function CardExpander() {
    _classCallCheck(this, CardExpander);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  CardExpander.prototype.render = function render() {
    var _context = this.context,
        expanded = _context.expanded,
        onExpandClick = _context.onExpandClick,
        icon = _context.icon,
        tooltipPosition = _context.tooltipPosition,
        tooltipLabel = _context.tooltipLabel,
        tooltipDelay = _context.tooltipDelay;


    return React.createElement(Button, {
      icon: true,
      className: getCollapserStyles({ flipped: expanded }, 'md-collapser--card'),
      onClick: onExpandClick,
      tooltipLabel: tooltipLabel,
      tooltipDelay: tooltipDelay,
      tooltipPosition: tooltipPosition,
      iconEl: icon
    });
  };

  return CardExpander;
}(Component);

CardExpander.contextTypes = contextTypes;
export default CardExpander;