var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';

/**
 * The `CardText` component is a simple wrapper for text or any content in a `Card`.
 * It really just adds correct padding and font color.
 */

var CardText = function (_PureComponent) {
  _inherits(CardText, _PureComponent);

  function CardText() {
    _classCallCheck(this, CardText);

    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
  }

  CardText.prototype.render = function render() {
    var _props = this.props,
        Component = _props.component,
        className = _props.className,
        expandable = _props.expandable,
        props = _objectWithoutProperties(_props, ['component', 'className', 'expandable']);

    return React.createElement(Component, _extends({}, props, { className: cn('md-card-text', className) }));
  };

  return CardText;
}(PureComponent);

CardText.propTypes = {
  /**
   * An optional style to apply.
   */
  style: PropTypes.object,

  /**
   * An optional className to apply.
   */
  className: PropTypes.string,

  /**
   * The children to display.
   */
  children: PropTypes.node,

  /**
   * The component to render as.
   */
  component: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]).isRequired,

  /**
   * Boolean if this component should be expandable when there is a `CardExpander`
   * above it in the `Card`.
   */
  expandable: PropTypes.bool
};
CardText.defaultProps = {
  component: 'section'
};
export default CardText;