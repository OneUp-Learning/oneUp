var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';

import CardTitle from './CardTitle';
import CardActions from './CardActions';
import Button from '../Buttons/Button';
import componentDeprecated from '../utils/PropTypes/componentDeprecated';

/**
 * The `CardActionOverlay` component is a simple wrapper for generating an overlay
 * for the `CardMedia` component by having a `CardTitle` and an array of props
 * for generating `FlatButton` for the `CardActions` component.
 */

var CardActionOverlay = function (_PureComponent) {
  _inherits(CardActionOverlay, _PureComponent);

  function CardActionOverlay() {
    _classCallCheck(this, CardActionOverlay);

    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
  }

  CardActionOverlay.prototype.render = function render() {
    var _props = this.props,
        actions = _props.actions,
        titleProps = _objectWithoutProperties(_props, ['actions']);

    return React.createElement(
      'span',
      null,
      React.createElement(CardTitle, titleProps),
      React.createElement(
        CardActions,
        null,
        actions.map(function (actionProps, i) {
          return React.createElement(Button, _extends({ flat: true, key: i }, actionProps));
        })
      )
    );
  };

  return CardActionOverlay;
}(PureComponent);

CardActionOverlay.propTypes = {
  /**
   * The title to use.
   */
  title: PropTypes.node,

  /**
   * The optional subtitle to use.
   */
  subtitle: PropTypes.node,

  /**
   * An array of flat button props.
   */
  actions: PropTypes.arrayOf(PropTypes.shape({
    label: PropTypes.node.isRequired
  })),

  /**
   * Any children to display in the `CardTitle` component.
   */
  children: PropTypes.node,
  deprecated: componentDeprecated('It is not a worthwhile component since the same thing can be accomplished with the `MediaOverlay` component.')
};
export default CardActionOverlay;