var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';

import deprecated from '../utils/PropTypes/componentDeprecated';
import Button from './Button';

var RaisedButton = function (_PureComponent) {
  _inherits(RaisedButton, _PureComponent);

  function RaisedButton() {
    _classCallCheck(this, RaisedButton);

    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
  }

  RaisedButton.prototype.render = function render() {
    return React.createElement(Button, _extends({}, this.props, { raised: true }));
  };

  return RaisedButton;
}(PureComponent);

RaisedButton.propTypes = {
  /**
   * The label to display in the button.
   */
  label: PropTypes.node.isRequired,

  /**
   * An optional className to apply to the button.
   */
  className: PropTypes.string,

  /**
   * Boolean if the icon should be displayed before the label.
   */
  iconBefore: PropTypes.bool,

  /**
   * A `FontIcon` to display in the button. It can be placed before
   * or after the label.
   */
  children: PropTypes.node,

  /**
   * The button type.
   */
  type: PropTypes.string,

  /**
   * Boolean if the button should be styled with the primary color.
   */
  primary: PropTypes.bool,

  /**
   * Boolean if the button should be styled with the secondary color.
   */
  secondary: PropTypes.bool,

  /**
   * Boolean if the button is disabled.
   */
  disabled: PropTypes.bool,

  /**
   * An optional href to convert the button into a link button.
   */
  href: PropTypes.string,

  /**
   * An optional function to call when the button is clicked.
   */
  onClick: PropTypes.func,

  deprecated: deprecated('The behavior of the `RaisedButton` can be achieved with the `Button` component ' + 'without the additional bundle size. Switch to the `Button` component and add a ' + 'prop `raised`.')
};
RaisedButton.defaultProps = {
  type: 'button',
  iconBefore: true
};
export default RaisedButton;