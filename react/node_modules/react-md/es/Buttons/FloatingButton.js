var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';

import deprecated from '../utils/PropTypes/componentDeprecated';
import IconButton from './IconButton';

/**
 * A `FloatingButton` is an extension of the `IconButton`.
 * A tooltip can be displayed on hover or touch hold if the
 * `tooltipLabel` prop is given.
 *
 * Another name for this button is a `FloatingActionButton` (FAB).
 *
 * Any other props (such as style or event listeners) will also be
 * applied.
 */

var FloatingButton = function (_PureComponent) {
  _inherits(FloatingButton, _PureComponent);

  function FloatingButton() {
    _classCallCheck(this, FloatingButton);

    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
  }

  FloatingButton.prototype.render = function render() {
    var _props = this.props,
        className = _props.className,
        fixed = _props.fixed,
        mini = _props.mini,
        children = _props.children,
        iconClassName = _props.iconClassName,
        props = _objectWithoutProperties(_props, ['className', 'fixed', 'mini', 'children', 'iconClassName']);

    return React.createElement(
      IconButton,
      _extends({}, props, {
        className: cn({
          'md-btn--floating-fixed': fixed,
          'md-btn--floating-mini': mini
        }, className),
        iconClassName: iconClassName,
        floating: true
      }),
      children
    );
  };

  return FloatingButton;
}(PureComponent);

FloatingButton.propTypes = {
  /**
   * The className to use for rendering the `FontIcon`.
   */
  iconClassName: PropTypes.string,

  /**
   * Any children to use to render the `FontIcon`.
   */
  children: PropTypes.node,

  /**
   * An optional className to apply to the button.
   */
  className: PropTypes.string,

  /**
   * The button type.
   */
  type: PropTypes.string,

  /**
   * Boolean if the button is disabled.
   */
  disabled: PropTypes.bool,

  /**
   * An optional href to convert the button into a link button.
   */
  href: PropTypes.string,

  /**
   * An optional function to call when the button is clicked.
   */
  onClick: PropTypes.func,

  /**
   * An optional label to use if you would like a tooltip to display
   * on hover or touch hold.
   */
  tooltipLabel: PropTypes.node,

  /**
   * The position that the tooltip should be displayed relative to
   * the button.
   */
  tooltipPosition: PropTypes.oneOf(['top', 'right', 'bottom', 'left']),

  /**
   * An optional amount of delay before the tooltip appears.
   */
  tooltipDelay: PropTypes.number,

  /**
   * Boolean if the floating button is fixed.
   */
  fixed: PropTypes.bool,

  /**
   * Boolean if the floating button should be displayed as the mini
   * version.
   */
  mini: PropTypes.bool,

  /**
   * Boolean if the floating button should be styled with the primary color.
   */
  primary: PropTypes.bool,

  /**
   * Boolean if the floating button should be styled with the secondary color.
   */
  secondary: PropTypes.bool,

  deprecated: deprecated('The behavior of the `FloatingButton` can be achieved with the `Button` component ' + 'without the additional bundle size. Switch to the `Button` component and add a ' + 'prop `floating`.')
};
export default FloatingButton;