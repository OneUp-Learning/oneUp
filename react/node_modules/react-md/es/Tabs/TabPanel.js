var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import isRequiredForA11y from 'react-prop-types/lib/isRequiredForA11y';

/**
 * This component is just a simple accessibility wrapper when using tabs. If you use the
 * `TabsContainer` component, you *should* not manually use this as the `TabsContainer`
 * generates this for you.
 */

var TabPanel = function (_PureComponent) {
  _inherits(TabPanel, _PureComponent);

  function TabPanel() {
    _classCallCheck(this, TabPanel);

    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
  }

  TabPanel.prototype.render = function render() {
    var _props = this.props,
        Component = _props.component,
        id = _props.id,
        active = _props.active,
        className = _props.className,
        controlledById = _props.controlledById,
        children = _props.children,
        props = _objectWithoutProperties(_props, ['component', 'id', 'active', 'className', 'controlledById', 'children']);

    return React.createElement(
      Component,
      _extends({}, props, {
        id: id,
        className: cn('md-tab-panel', className),
        role: 'tabpanel',
        'aria-hidden': !active,
        'aria-labelledby': controlledById
      }),
      children
    );
  };

  return TabPanel;
}(PureComponent);

TabPanel.propTypes = {
  /**
   * An id for the panel. This is used for a11y. This should equal the `controlsId`
   * of whichever tab's children will be placed in here.
   */
  id: isRequiredForA11y(PropTypes.oneOfType([PropTypes.number, PropTypes.string])),

  /**
   * An id for the tab that owns this panel. This should equal the `id` of whichever
   * tab's children will be placed in here.
   */
  controlledById: isRequiredForA11y(PropTypes.oneOfType([PropTypes.number, PropTypes.string])),

  /**
   * An optional style to apply.
   */
  style: PropTypes.object,

  /**
   * An optional className to apply.
   */
  className: PropTypes.string,

  /**
   * The component to render the panel as.
   */
  component: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object]).isRequired,

  /**
   * Boolean if the panel is currently active. This is used to generated the `aria-hidden`
   * attribute.
   */
  active: PropTypes.bool,

  /**
   * Any children to display.
   */
  children: PropTypes.node
};
TabPanel.defaultProps = {
  component: 'div'
};
export default TabPanel;