function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import { Motion, spring } from 'react-motion';

var TabIndicator = function (_PureComponent) {
  _inherits(TabIndicator, _PureComponent);

  function TabIndicator() {
    _classCallCheck(this, TabIndicator);

    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
  }

  TabIndicator.prototype.render = function render() {
    var visible = this.props.visible;

    return React.createElement(
      Motion,
      {
        style: {
          x: spring(this.props.offset),
          width: spring(this.props.width),
          height: spring(visible ? 2 : 0)
        }
      },
      function (_ref) {
        var x = _ref.x,
            height = _ref.height,
            width = _ref.width;

        var transform = 'translate3d(' + x + 'px, 0, 0)';
        return React.createElement('span', {
          style: {
            height: height,
            width: width,
            WebkitTransform: transform,
            MozTransform: transform,
            msTransform: transform,
            transform: transform
          },
          className: 'md-tab-indicator'
        });
      }
    );
  };

  return TabIndicator;
}(PureComponent);

TabIndicator.propTypes = {
  offset: PropTypes.number.isRequired,
  width: PropTypes.number.isRequired,
  visible: PropTypes.bool
};
export default TabIndicator;