var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';
import isRequiredForA11y from 'react-prop-types/lib/isRequiredForA11y';

import Menu from '../Menus/Menu';
import AccessibleFakeInkedButton from '../Helpers/AccessibleFakeInkedButton';
import mapToListParts from '../utils/mapToListParts';

/**
 * The `MenuTab` component is used when there are too many desktop tabs
 * to be displayed without any overflow. If the `Tabs` component is used,
 * this will automatically be included when the `menuOverflow` prop is true.
 */

var MenuTab = function (_PureComponent) {
  _inherits(MenuTab, _PureComponent);

  function MenuTab() {
    var _temp, _this, _ret;

    _classCallCheck(this, MenuTab);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.state = { visible: false }, _this._toggleVisible = function (e) {
      if (_this.props.onClick) {
        _this.props.onClick(e);
      }

      _this.setState({ visible: !_this.state.visible });
    }, _this._handleClose = function () {
      _this.setState({ visible: false });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  MenuTab.prototype.render = function render() {
    var _props = this.props,
        id = _props.id,
        style = _props.style,
        className = _props.className,
        tabStyle = _props.tabStyle,
        tabClassName = _props.tabClassName,
        tabs = _props.tabs,
        label = _props.label,
        activeTabIndex = _props.activeTabIndex,
        overflowAtIndex = _props.overflowAtIndex,
        props = _objectWithoutProperties(_props, ['id', 'style', 'className', 'tabStyle', 'tabClassName', 'tabs', 'label', 'activeTabIndex', 'overflowAtIndex']);

    var active = activeTabIndex >= overflowAtIndex;

    var tab = React.createElement(
      AccessibleFakeInkedButton,
      _extends({}, props, {
        onClick: this._toggleVisible,
        style: tabStyle,
        className: cn('md-tab md-tab--menu', tabClassName)
      }),
      label
    );

    return React.createElement(
      Menu,
      {
        id: id,
        style: style,
        className: cn('md-menu--tab', {
          'md-tab--active': active,
          'md-tab--inactive': !active
        }, className),
        toggle: tab,
        visible: this.state.visible,
        onClose: this._handleClose
      },
      tabs.map(mapToListParts)
    );
  };

  return MenuTab;
}(PureComponent);

MenuTab.propTypes = {
  /**
   * An id to give the tab's menu.
   */
  id: isRequiredForA11y(PropTypes.oneOfType([PropTypes.number, PropTypes.string])),

  /**
   * The current active tab index. This is used to determine which list item
   * is active in the menu, and if the styles for an active tab should be applied
   * to the menu.
   */
  activeTabIndex: PropTypes.number.isRequired,

  /**
   * An tab index that caused the overflow to happen.
   */
  overflowAtIndex: PropTypes.number.isRequired,

  /**
   * A list of tabs that should be rendered in the menu once opened. This can either
   * be:
   *
   * - a `ListItem`, `Divider`, or `Subheader` component
   * - a string to use as the `primaryText` for a list item
   * - an object that defines props to generate a `ListItem`, `Divider`, or `Subheader` component
   */
  tabs: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.element, PropTypes.string, PropTypes.shape({
    divider: PropTypes.bool,
    subheader: PropTypes.bool,
    primaryText: PropTypes.node
  })])).isRequired,

  /**
   * An optional style to apply to the menu.
   */
  style: PropTypes.object,

  /**
   * An optional className to apply to the menu.
   */
  className: PropTypes.string,

  /**
   * An optional style to apply to the tab in the menu.
   */
  tabStyle: PropTypes.object,

  /**
   * An optional className to apply to the tab in the menu.
   */
  tabClassName: PropTypes.string,

  /**
   * An optional function to call when the tab is clicked.
   */
  onClick: PropTypes.func,

  /**
   * The label to display in the tab. This should normally be some text with
   * a drop down arrow next to it.
   */
  label: PropTypes.node.isRequired
};
export default MenuTab;