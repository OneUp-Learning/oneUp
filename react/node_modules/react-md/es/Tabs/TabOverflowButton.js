var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';

import Button from '../Buttons/Button';

var TabOverflowButton = function (_PureComponent) {
  _inherits(TabOverflowButton, _PureComponent);

  function TabOverflowButton() {
    _classCallCheck(this, TabOverflowButton);

    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
  }

  TabOverflowButton.prototype.render = function render() {
    var _props = this.props,
        left = _props.left,
        icon = _props.icon,
        props = _objectWithoutProperties(_props, ['left', 'icon']);

    return React.createElement(Button, _extends({}, props, {
      icon: true,
      className: cn('md-icon--inherit md-btn--tab-overflow', {
        'md-btn--tab-overflow-left': left,
        'md-btn--tab-overflow-right': !left,
        'md-btn--tab-overflow-icon': icon
      })
    }));
  };

  return TabOverflowButton;
}(PureComponent);

TabOverflowButton.propTypes = {
  left: PropTypes.bool,
  icon: PropTypes.bool
};
export default TabOverflowButton;