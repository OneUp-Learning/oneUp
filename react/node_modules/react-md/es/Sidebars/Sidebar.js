var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';

import Drawer from '../Drawers/Drawer';
import componentDeprecated from '../utils/PropTypes/componentDeprecated';

var Sidebar = function (_PureComponent) {
  _inherits(Sidebar, _PureComponent);

  function Sidebar() {
    _classCallCheck(this, Sidebar);

    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
  }

  Sidebar.prototype.render = function render() {
    var _props = this.props,
        isOpen = _props.isOpen,
        header = _props.header,
        overlay = _props.overlay,
        children = _props.children,
        onOverlayClick = _props.onOverlayClick,
        align = _props.align,
        items = _props.items,
        fixed = _props.fixed,
        props = _objectWithoutProperties(_props, ['isOpen', 'header', 'overlay', 'children', 'onOverlayClick', 'align', 'items', 'fixed']);

    delete props.responsive;

    return React.createElement(
      Drawer,
      _extends({}, props, {
        visible: isOpen,
        onVisibilityChange: onOverlayClick,
        navItems: items,
        position: align,
        overflay: overlay,
        header: header,
        inline: !fixed
      }),
      children
    );
  };

  return Sidebar;
}(PureComponent);

Sidebar.propTypes = {
  deprecated: componentDeprecated('All the functionality and responsiveness of a `Sidebar` can be handled by the `Drawer` instead.' + ' Switch to the `Drawer` component instead.'),

  /**
   * Boolean if the overlay should appear when opened.
   */
  overlay: PropTypes.bool,

  /**
   * Boolean if the sidebar is visible and open.
   */
  isOpen: PropTypes.bool,

  /**
   * Boolean if the sidebar is fixed to the side of the page.
   */
  fixed: PropTypes.bool,

  /**
   * Boolean if sidebar should be responsive.
   */
  responsive: PropTypes.bool,

  /**
   * An optional header to display above the children or list items.
   */
  header: PropTypes.node,

  /**
   * Any children to display after the generated list of items.
   */
  children: PropTypes.node,

  /**
   * An optional className to apply.
   */
  className: PropTypes.string,

  /**
   * The transition name to use for the overlay.
   */
  transitionName: PropTypes.string,

  /**
   * The enter timeout for the overlay transition.
   */
  transitionEnterTimeout: PropTypes.number,

  /**
   * The leave timeout for the overlay transition.
   */
  transitionLeaveTimeout: PropTypes.number,

  /**
   * An optional function to call when the overlay is clicked.
   * This should normally close the sidebar.
   */
  onOverlayClick: PropTypes.func,

  /**
   * The position to align the sidebar of the screen to.
   */
  align: PropTypes.oneOf(['left', 'right']),

  /**
   * A list of item props to convert into `ListItem`, `Divider`, or
   * `Subheader` components.
   *
   * ##### Item Descriptions
   */
  items: PropTypes.arrayOf(PropTypes.shape({
    /**
     * Boolean if this item is a divider.
     */
    divider: PropTypes.bool,

    /**
     * Boolean if this item is a subheader.
     */
    subheader: PropTypes.bool,

    /**
     * The primary text to display in a `ListItem` or a `Subheader`.
     */
    primaryText: PropTypes.node
  }))
};
Sidebar.defaultProps = {
  align: 'left'
};
export default Sidebar;