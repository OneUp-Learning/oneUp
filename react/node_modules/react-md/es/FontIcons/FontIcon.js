var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';

import themeColors from '../utils/themeColors';

var ICON_SIZE = 24;

/**
 * The \`FontIcon\` component is used for rendering a font-icon library's
 * icon. The default is to use the `material-icons` library, but others
 * can be used as well.
 *
 * If you are using another font-icon library that does not always create
 * icons with a perfect 1:1 scale (such as font-awesome), it is recommended
 * to update the `.md-icon` styles to set the width and height to `$md-font-icon-size`.
 * However, this will prevent different sided icons.
 *
 * ```scss
 * .md-icon.fa {
 *   height: $md-font-icon-size;
 *   width: $md-font-icon-size;
 * }
 * ```
 */

var FontIcon = function (_PureComponent) {
  _inherits(FontIcon, _PureComponent);

  function FontIcon(props) {
    _classCallCheck(this, FontIcon);

    var _this = _possibleConstructorReturn(this, _PureComponent.call(this));

    _initialiseProps.call(_this);

    _this.state = { styles: _this._mergeStyles(props) };
    return _this;
  }

  FontIcon.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var _props = this.props,
        style = _props.style,
        forceSize = _props.forceSize,
        forceFontSize = _props.forceFontSize;

    if (style !== nextProps.style || forceSize !== nextProps.forceSize || forceFontSize !== nextProps.forceFontSize) {
      this.setState({ styles: this._mergeStyles(nextProps) });
    }
  };

  FontIcon.prototype.render = function render() {
    var styles = this.state.styles;

    var _props2 = this.props,
        iconClassName = _props2.iconClassName,
        className = _props2.className,
        children = _props2.children,
        disabled = _props2.disabled,
        primary = _props2.primary,
        secondary = _props2.secondary,
        error = _props2.error,
        inherit = _props2.inherit,
        style = _props2.style,
        forceSize = _props2.forceSize,
        forceFontSize = _props2.forceFontSize,
        props = _objectWithoutProperties(_props2, ['iconClassName', 'className', 'children', 'disabled', 'primary', 'secondary', 'error', 'inherit', 'style', 'forceSize', 'forceFontSize']);

    var classes = cn('md-icon', iconClassName, themeColors({
      disabled: disabled,
      error: error,
      inherit: inherit,
      primary: primary,
      secondary: secondary
    }), className);

    return React.createElement(
      'i',
      _extends({}, props, { style: styles, className: classes }),
      children
    );
  };

  return FontIcon;
}(PureComponent);

FontIcon.propTypes = {
  /**
   * An optional style to apply.
   */
  style: PropTypes.object,

  /**
   * An optional className to apply to the `FontIcon`.
   */
  className: PropTypes.string,

  /**
   * The icon font library className to use to display the icon.
   */
  iconClassName: PropTypes.string.isRequired,

  /**
   * Boolean if the primary theme color should be applied.
   */
  primary: PropTypes.bool,

  /**
   * Boolean if the secondary theme color should be applied.
   */
  secondary: PropTypes.bool,

  /**
   * Boolean if the icon is considered disabled and should inherit the
   * disabled color.
   */
  disabled: PropTypes.bool,

  /**
   * Boolean if the error color should be applied to the icon.
   */
  error: PropTypes.bool,

  /**
   * Boolean if the color of the icon should be inherited by parent elements.
   */
  inherit: PropTypes.bool,

  /**
   * Either a boolean that will enforce the 24x24 size of the font icon or a number of the size
   * to enforce. This is useful when using other font icon libraries that do not have a consistent
   * size.
   */
  forceSize: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),

  /**
   * Boolean if the `forceSize` prop should also force the `font-size` instead of only `width` and `height`.
   */
  forceFontSize: function forceFontSize(props, propName, component) {
    for (var _len = arguments.length, args = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
      args[_key - 3] = arguments[_key];
    }

    var error = PropTypes.bool.apply(PropTypes, [props, propName, component].concat(args));
    if (!error && typeof props.forceSize === 'undefined' && props[propName]) {
      error = new Error('You provided a `forceFontSize` prop to the ' + component + ' component, without specifying the `forceSize` ' + ('prop. Either set the `forceSize` prop to a boolean or a number, or disable `' + propName + '`.'));
    }

    return error;
  },

  /**
   * Any children required to display the icon with the font library.
   */
  children: PropTypes.node
};
FontIcon.defaultProps = {
  iconClassName: 'material-icons'
};

var _initialiseProps = function _initialiseProps() {
  this._mergeStyles = function (_ref) {
    var style = _ref.style,
        forceSize = _ref.forceSize,
        forceFontSize = _ref.forceFontSize;

    var styles = style;
    if (typeof forceSize === 'boolean') {
      styles = _extends({
        height: ICON_SIZE,
        width: ICON_SIZE,
        fontSize: forceFontSize ? ICON_SIZE : undefined
      }, style);
    } else if (typeof forceSize === 'number') {
      styles = _extends({
        height: forceSize,
        width: forceSize,
        fontSize: forceFontSize ? forceSize : undefined
      }, style);
    }

    return styles;
  };
};

export default FontIcon;