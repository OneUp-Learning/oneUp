var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';

import TICK from '../constants/CSSTransitionGroupTick';
import themeColors from '../utils/themeColors';
import FontIcon from '../FontIcons/FontIcon';
import AccessibleFakeInkedButton from '../Helpers/AccessibleFakeInkedButton';
import IconSeparator from '../Helpers/IconSeparator';
import Paper from '../Papers/Paper';
import TextFieldDivider from '../TextFields/TextFieldDivider';

var SelectFieldInput = function (_PureComponent) {
  _inherits(SelectFieldInput, _PureComponent);

  function SelectFieldInput() {
    var _temp, _this, _ret;

    _classCallCheck(this, SelectFieldInput);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this.state = { transition: null }, _this._timeout = null, _this._transitionNewValue = function () {
      var _this$props = _this.props,
          transitionTime = _this$props.transitionTime,
          transitionName = _this$props.transitionName;

      if (_this._timeout) {
        clearTimeout(_this._timeout);
      }

      _this._timeout = setTimeout(function () {
        _this._timeout = setTimeout(function () {
          _this._timeout = null;
          _this.setState({ transition: null });
        }, transitionTime);

        _this.setState({ transition: _this.state.transition + ' ' + transitionName + '-enter-active' });
      }, TICK);

      _this.setState({ transition: transitionName + '-enter' });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  SelectFieldInput.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (this.props.value !== nextProps.value) {
      this._transitionNewValue();
    }
  };

  SelectFieldInput.prototype.componentWillUnmount = function componentWillUnmount() {
    if (this._timeout) {
      clearTimeout(this._timeout);
    }
  };

  SelectFieldInput.prototype.render = function render() {
    var _props = this.props,
        id = _props.id,
        className = _props.className,
        name = _props.name,
        value = _props.value,
        label = _props.label,
        placeholder = _props.placeholder,
        active = _props.active,
        activeLabel = _props.activeLabel,
        error = _props.error,
        disabled = _props.disabled,
        required = _props.required,
        toolbar = _props.toolbar,
        below = _props.below,
        lineDirection = _props.lineDirection,
        dropdownIcon = _props.dropdownIcon,
        iconChildren = _props.iconChildren,
        iconClassName = _props.iconClassName,
        transitionName = _props.transitionName,
        transitionTime = _props.transitionTime,
        props = _objectWithoutProperties(_props, ['id', 'className', 'name', 'value', 'label', 'placeholder', 'active', 'activeLabel', 'error', 'disabled', 'required', 'toolbar', 'below', 'lineDirection', 'dropdownIcon', 'iconChildren', 'iconClassName', 'transitionName', 'transitionTime']);

    var transition = this.state.transition;


    var divider = void 0;
    if (!below && !toolbar) {
      divider = React.createElement(TextFieldDivider, {
        key: 'text-divider',
        active: active,
        error: error,
        lineDirection: lineDirection,
        className: 'md-divider--select-field'
      });
    }

    var visibleLabel = activeLabel;
    if (!activeLabel && activeLabel !== 0) {
      visibleLabel = (!label || active) && placeholder || '';
    }

    var labelActive = !!activeLabel || activeLabel === 0;

    var icon = dropdownIcon;
    if (iconClassName || iconChildren) {
      icon = React.createElement(
        FontIcon,
        { iconClassName: iconClassName },
        iconChildren
      );
    }
    icon = React.cloneElement(icon, { disabled: disabled });

    return React.createElement(
      AccessibleFakeInkedButton,
      _extends({}, props, {
        id: id + '-toggle',
        role: 'listbox',
        disabled: disabled,
        component: Paper,
        zDepth: below && active ? 1 : 0,
        inkDisabled: !below,
        className: cn('md-select-field', themeColors({
          disabled: disabled,
          hint: !labelActive && placeholder,
          text: labelActive
        }), className)
      }),
      React.createElement(
        IconSeparator,
        {
          label: visibleLabel,
          labelClassName: transition,
          className: cn('md-text-field', {
            'md-text-field--margin': !below && !label,
            'md-text-field--floating-margin': label,
            'md-text-field--toolbar': toolbar && !below,
            'md-select-field--text-field': !below,
            'md-select-field--btn': below
          })
        },
        icon
      ),
      divider,
      React.createElement('input', {
        key: 'value',
        type: 'hidden',
        id: id,
        name: name,
        value: value,
        required: required,
        disabled: disabled
      })
    );
  };

  return SelectFieldInput;
}(PureComponent);

SelectFieldInput.propTypes = {
  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  style: PropTypes.object,
  className: PropTypes.string,
  name: PropTypes.string,
  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,
  disabled: PropTypes.bool,
  required: PropTypes.bool,
  label: PropTypes.node,
  placeholder: PropTypes.string,
  active: PropTypes.bool,
  activeLabel: PropTypes.node,
  below: PropTypes.bool,
  error: PropTypes.bool,
  toolbar: PropTypes.bool,
  dropdownIcon: PropTypes.element,
  iconClassName: PropTypes.string,
  iconChildren: PropTypes.node,
  transitionName: PropTypes.string.isRequired,
  transitionTime: PropTypes.number.isRequired,
  lineDirection: TextFieldDivider.propTypes.lineDirection
};
SelectFieldInput.defaultProps = {
  transitionName: 'md-drop',
  transitionTime: 300
};
export default SelectFieldInput;