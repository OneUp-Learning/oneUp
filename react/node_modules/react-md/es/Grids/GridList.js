var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import cn from 'classnames';
import PropTypes from 'prop-types';

import Grid from './Grid';
import Cell from './Cell';

var DIFF_KEYS = ['className', 'cellClassName', 'stacked', 'container', 'noSpacing', 'gutter', 'spacing', 'align', 'position', 'size', 'offset', 'order', 'phoneSize', 'phoneOrder', 'phoneOffset', 'phoneHidden', 'tabletSize', 'tabletOrder', 'tabletOffset', 'tabletHidden', 'desktopSize', 'desktopOrder', 'desktopOffset', 'desktopHidden'];

var GridList = function (_PureComponent) {
  _inherits(GridList, _PureComponent);

  /**
   * A utility function to get the grid's className based on the `Grid`'s and `Cell`'s
   * props. This is * used behind the scenes to merge and create the className for the grid.
   *
   * ### Example:
   * ```js
   * const { className, cellClassName } = GridList.getClassNames();
   * const { className, cellClassName } = GridList.getClassNames({ size: 1, container: 'custom' });
   * ```
   *
   * @param {Object=} props - This should be an object of the `Grid`'s props. It
   *    will extract the needed keys and generate the classNames.
   * @return {Object} an object containing the `className` and `cellClassName` attributes.
   */
  GridList.getClassNames = function getClassNames() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var className = props.className,
        cellClassName = props.cellClassName,
        remaining = _objectWithoutProperties(props, ['className', 'cellClassName']);

    return {
      className: Grid.getClassName(_extends({ className: className }, remaining)),
      cellClassName: Cell.getClassName(_extends({ className: cellClassName }, remaining))
    };
  };

  function GridList(props) {
    _classCallCheck(this, GridList);

    var _this = _possibleConstructorReturn(this, _PureComponent.call(this));

    _this.state = GridList.getClassNames(props);
    return _this;
  }

  GridList.prototype.componentWillMount = function componentWillMount() {
    this.setState(GridList.getClassNames(this.props));
  };

  GridList.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var _this2 = this;

    if (DIFF_KEYS.some(function (key) {
      return _this2.props[key] !== nextProps[key];
    })) {
      this.setState(GridList.getClassNames(nextProps));
    }
  };

  GridList.prototype.render = function render() {
    var _state = this.state,
        className = _state.className,
        cellClassName = _state.cellClassName;

    var _props = this.props,
        style = _props.style,
        cellStyle = _props.cellStyle,
        Component = _props.component,
        children = _props.children,
        propClassName = _props.className,
        propCellClassName = _props.cellClassName,
        container = _props.container,
        noSpacing = _props.noSpacing,
        stacked = _props.stacked,
        gutter = _props.gutter,
        spacing = _props.spacing,
        align = _props.align,
        position = _props.position,
        size = _props.size,
        offset = _props.offset,
        order = _props.order,
        phoneSize = _props.phoneSize,
        phoneOrder = _props.phoneOrder,
        phoneOffset = _props.phoneOffset,
        phoneHidden = _props.phoneHidden,
        tabletSize = _props.tabletSize,
        tabletOrder = _props.tabletOrder,
        tabletOffset = _props.tabletOffset,
        tabletHidden = _props.tabletHidden,
        desktopSize = _props.desktopSize,
        desktopOrder = _props.desktopOrder,
        desktopOffset = _props.desktopOffset,
        desktopHidden = _props.desktopHidden,
        props = _objectWithoutProperties(_props, ['style', 'cellStyle', 'component', 'children', 'className', 'cellClassName', 'container', 'noSpacing', 'stacked', 'gutter', 'spacing', 'align', 'position', 'size', 'offset', 'order', 'phoneSize', 'phoneOrder', 'phoneOffset', 'phoneHidden', 'tabletSize', 'tabletOrder', 'tabletOffset', 'tabletHidden', 'desktopSize', 'desktopOrder', 'desktopOffset', 'desktopHidden']);

    if (typeof children === 'function') {
      return children({ style: style, className: className, cellStyle: cellStyle, cellClassName: cellClassName });
    }

    return React.createElement(
      Component,
      _extends({}, props, { style: style, className: className }),
      React.Children.map(children, function (child) {
        if (!child) {
          return child;
        }

        var childStyle = child.props.style;
        if (cellStyle) {
          childStyle = childStyle ? _extends({}, cellStyle, childStyle) : cellStyle;
        }

        return React.cloneElement(child, {
          style: childStyle,
          className: cn(child.props.className, cellClassName)
        });
      })
    );
  };

  return GridList;
}(PureComponent);

GridList.propTypes = {
  /**
   * An optional style to apply to the Grid component. This will only be applied
   * if the `children` prop is not a callback function.
   *
   * @see {@link #children}
   */
  style: PropTypes.object,

  /**
   * An optional className to apply to the Grid component. This will only be applied
   * if the `children` prop is not a callback function.
   *
   * @see {@link #children}
   */
  className: PropTypes.string,

  /**
   * An optional style to apply to each child. This will only be applied
   * if the `children` prop is not a callback function.
   *
   * @see {@link #children}
   */
  cellStyle: PropTypes.object,

  /**
   * An optional className to apply to each child. This will only be applied
   * if the `children` prop is not a callback function.
   *
   * @see {@link #children}
   */
  cellClassName: PropTypes.string,

  /**
   * The component to render the Cell as. This should probably not be used as much
   * as the `children` callback function.
   */
  component: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object]),

  /**
   * The children can either be renderable React elements or a callback function
   * that accepts the style and className props to apply so that the styles can
   * be manually added to whichever component.
   */
  children: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),

  /**
   * An optional container name to apply to the Grid. This should be the same name as provided
   * to the [react-md-make-grid-container](/components/grids?tab=2#mixin-react-md-make-grid-container) mixin.
   */
  container: PropTypes.string,

  /**
   * Boolean if the grid should be placed vertically instead of horizontally.
   */
  stacked: PropTypes.bool,

  /**
   * Boolean if all the gutters and spacing should be removed from the grid.
   */
  noSpacing: PropTypes.bool,

  /**
   * When the [react-md-make-custom-grid](/components/grids?tab=2#mixin-react-md-make-custom-grid) mixin
   * is used, you can use the `gutter` and `spacing` props on the `Grid` to apply the correct className
   */
  gutter: PropTypes.number,

  /**
   * When the [react-md-make-custom-grid](/components/grids?tab=2#mixin-react-md-make-custom-grid) mixin
   * is used, you can use the `gutter` and `spacing` props on the `Grid` to apply the correct className
   */
  spacing: PropTypes.number,

  /**
   * An optional cell alignment to apply. When the `Grid` is not `stacked`,
   * this will apply to vertical alignment within each "row" of the grid.
   *
   * Alignments:
   * - `top` - This will align to the top of the row
   * - `middle` - This will align to the middle of the row
   * - `bottom` - This will align to the bottom of the row
   * - `stretch` - This will make the cell stretch to fill all the available space
   *   in the row.
   *
   * @see {@link #position}
   */
  align: PropTypes.oneOf(['top', 'middle', 'bottom', 'stretch']),

  /**
   * An optional cell position to apply. When the `Grid` is not `stacked`,
   * this will apply to horizontal alignment within each "row" of the grid.
   *
   * Positions:
   * - `center` - This will align the cell to be within the center of the row. This really
   *    just applies `margin-left: auto; margin-right: auto`.
   * - `right` - This will align the cell to the end of the row. This really just applies `margin-left: auto`.
   *
   * @see {@link #align}
   */
  position: PropTypes.oneOf(['center', 'right']),

  /**
   * An optional size to apply to the cell. This sizing will be applied across all media sizes.
   * If the size is greater than the number of columns allowed for the media size, it will just
   * span the entire width.
   */
  size: PropTypes.number,

  /**
   * An optional order to apply to the cell. This order will be applied across all media sizes.
   */
  order: PropTypes.number,

  /**
   * An optional offset to apply to the cell. This will add spacing to the left of the cell.
   */
  offset: PropTypes.number,

  /**
   * An optional size to apply to the cell only on phones.
   */
  phoneSize: PropTypes.number,

  /**
   * An optional order to apply to the cell only on phones.
   */
  phoneOrder: PropTypes.number,

  /**
   * An optional offset to apply to the cell only on phones.
   */
  phoneOffset: PropTypes.number,

  /**
   * Boolean if the cell should be hidden on phones only.
   */
  phoneHidden: PropTypes.bool,

  /**
   * An optional size to apply to the cell only on tablets.
   */
  tabletSize: PropTypes.number,

  /**
   * An optional order to apply to the cell only on tablets.
   */
  tabletOrder: PropTypes.number,

  /**
   * An optional offset to apply to the cell only on tablets.
   */
  tabletOffset: PropTypes.number,

  /**
   * Boolean if the cell should be hidden on tablets only.
   */
  tabletHidden: PropTypes.bool,

  /**
   * An optional size to apply to the cell only on desktops.
   */
  desktopSize: PropTypes.number,

  /**
   * An optional order to apply to the cell only on desktops.
   */
  desktopOrder: PropTypes.number,

  /**
   * An optional offset to apply to the cell only on desktops.
   */
  desktopOffset: PropTypes.number,

  /**
   * Boolean if the cell should be hidden on desktops only.
   */
  desktopHidden: PropTypes.bool
};
GridList.defaultProps = {
  component: 'div',
  stacked: false,
  noSpacing: false,
  phoneHidden: false,
  tabletHidden: false,
  desktopHidden: false
};
export default GridList;