var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import CSSTransitionGroup from 'react-transition-group/CSSTransitionGroup';
import cn from 'classnames';

import Button from '../Buttons/Button';

/**
 * Any props such as style or event listeners will be applied to the
 * main floating action button. If you want props applied to the `SpeedDial`
 * itself, you will need to set them in the `containerProps` prop.
 */

var SpeedDial = function (_PureComponent) {
  _inherits(SpeedDial, _PureComponent);

  function SpeedDial(props) {
    _classCallCheck(this, SpeedDial);

    var _this = _possibleConstructorReturn(this, _PureComponent.call(this, props));

    _this.state = { isOpen: props.initiallyOpen };
    _this._handleClick = _this._handleClick.bind(_this);
    return _this;
  }

  SpeedDial.prototype._isOpen = function _isOpen(props, state) {
    return typeof props.isOpen === 'undefined' ? state.isOpen : props.isOpen;
  };

  SpeedDial.prototype._handleClick = function _handleClick(e) {
    var _props = this.props,
        onClick = _props.onClick,
        onPassiveClick = _props.onPassiveClick,
        onActiveClick = _props.onActiveClick;

    if (onClick) {
      onClick(e);
    }

    var isOpen = this._isOpen(this.props, this.state);
    if (isOpen && onActiveClick) {
      onActiveClick(e);
    } else if (!isOpen && onPassiveClick) {
      onPassiveClick(e);
    }

    if (typeof this.props.isOpen === 'undefined') {
      this.setState({ isOpen: !isOpen });
    }
  };

  SpeedDial.prototype.render = function render() {
    var _props2 = this.props,
        fabs = _props2.fabs,
        passiveIconChildren = _props2.passiveIconChildren,
        passiveIconClassName = _props2.passiveIconClassName,
        activeIconChildren = _props2.activeIconChildren,
        activeIconClassName = _props2.activeIconClassName,
        transitionName = _props2.transitionName,
        transitionEnterTimeout = _props2.transitionEnterTimeout,
        speedDialTransitionName = _props2.speedDialTransitionName,
        speedDialTransitionEnterTimeout = _props2.speedDialTransitionEnterTimeout,
        speedDialTransitionLeaveTimeout = _props2.speedDialTransitionLeaveTimeout,
        containerProps = _props2.containerProps,
        props = _objectWithoutProperties(_props2, ['fabs', 'passiveIconChildren', 'passiveIconClassName', 'activeIconChildren', 'activeIconClassName', 'transitionName', 'transitionEnterTimeout', 'speedDialTransitionName', 'speedDialTransitionEnterTimeout', 'speedDialTransitionLeaveTimeout', 'containerProps']);

    delete props.isOpen;
    delete props.initiallyOpen;

    var isOpen = this._isOpen(this.props, this.state);

    var speedDialFabs = void 0;
    if (isOpen) {
      speedDialFabs = fabs.map(function (fab, i) {
        var fn = void 0;
        var el = void 0;
        var fabProps = void 0;
        if (React.isValidElement(fab)) {
          el = React.Children.only(fab);
          fn = React.cloneElement;
          fabProps = fab.props;
        } else {
          el = Button;
          fn = React.createElement;
          fabProps = fab;
        }

        var created = fn(el, _extends({
          floating: true,
          mini: true
        }, fabProps));
        return React.createElement(
          'div',
          { key: i, className: 'md-speed-dial-fab' },
          created
        );
      });
    }

    props.iconClassName = isOpen ? activeIconClassName : passiveIconClassName;
    props.children = isOpen ? activeIconChildren : passiveIconChildren;
    return React.createElement(
      CSSTransitionGroup,
      _extends({}, containerProps, {
        component: 'div',
        className: cn('md-speed-dial', !!containerProps && containerProps.className),
        transitionName: transitionName + '-' + (isOpen ? 'right' : 'left'),
        transitionEnterTimeout: transitionEnterTimeout,
        transitionLeave: false,
        ref: 'container'
      }),
      React.createElement(
        CSSTransitionGroup,
        {
          component: 'div',
          key: 'speed-dial-fabs',
          transitionName: speedDialTransitionName,
          transitionEnterTimeout: speedDialTransitionEnterTimeout,
          transitionLeaveTimeout: speedDialTransitionLeaveTimeout
        },
        speedDialFabs
      ),
      React.createElement(Button, _extends({}, props, {
        floating: true,
        key: (isOpen ? 'open' : 'closed') + '-fab',
        onClick: this._handleClick
      }))
    );
  };

  return SpeedDial;
}(PureComponent);

SpeedDial.propTypes = {
  /**
   * A boolean if the speed dial is currently open. This will make
   * the speed dial into a controlled component.
   */
  isOpen: PropTypes.bool,

  /**
   * Boolean if the uncontrolled speed dial is initially open.
   */
  initiallyOpen: PropTypes.bool,

  /**
   * An optional className to apply to the speed dial.
   */
  className: PropTypes.string,

  /**
   * The speed dial's floating action button transition name when the button's
   * open state changes. If the button is open, `-right` is appened, otherwise
   * `-left`.
   */
  transitionName: PropTypes.string.isRequired,

  /**
   * The timeout for the speed dial's floating action button transition.
   */
  transitionEnterTimeout: PropTypes.number.isRequired,

  /**
   * The name for the flinging animation of the speed dial.
   */
  speedDialTransitionName: PropTypes.string.isRequired,

  /**
   * The timeout for the flinging animation of the speed dial when opening.
   */
  speedDialTransitionEnterTimeout: PropTypes.number.isRequired,

  /**
   * The timeout for the flinging animation when the speed dial is closing.
   */
  speedDialTransitionLeaveTimeout: PropTypes.number.isRequired,

  /**
   * The optional children to display for unopened speed dial floating action button.
   */
  passiveIconChildren: PropTypes.node,

  /**
   * The optional icon className to display for unopened speed dial floating action button.
   */
  passiveIconClassName: PropTypes.node,

  /**
   * The optional children to display for opened speed dial floating action button.
   */
  activeIconChildren: PropTypes.node,

  /**
   * The optional icon className to display for opened speed dial floating action button.
   */
  activeIconClassName: PropTypes.string,

  /**
   * A list of `FloatingButton` or props to generate the `FloatinButton` when the
   * `SpeedDial` is open. The buttons will automatically be converted to the `mini`
   * version.
   */
  fabs: function fabs(props, propName, component) {
    for (var _len = arguments.length, others = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
      others[_key - 3] = arguments[_key];
    }

    var size = props.fabs.length;
    if (size >= 3 && size <= 5) {
      var _PropTypes$arrayOf;

      return (_PropTypes$arrayOf = PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.node, PropTypes.shape({
        onClick: PropTypes.func,
        iconClassName: PropTypes.string,
        children: PropTypes.node
      })]))).isRequired.apply(_PropTypes$arrayOf, [props, propName, component].concat(others));
    }

    var middle = size < 3 ? 'at least 3' : 'no more than 5';
    return new Error('A speed dial requires ' + middle + ' floating action buttons to fling. ' + ('However, only ' + size + ' were given.'));
  },

  /**
   * An optional function to call when the main floating action button is clicked.
   */
  onClick: PropTypes.func,

  /**
   * An optional function to call when the main floating action button is clicked.
   */
  onPassiveClick: PropTypes.func,

  /**
   * An optional function to call when the main floating action button is clicked.
   */
  onActiveClick: PropTypes.func,

  /**
   * Any additional props to apply to the speed dial itself.
   */
  containerProps: PropTypes.object
};
SpeedDial.defaultProps = {
  initiallyOpen: false,
  transitionName: 'md-fab-rotate',
  transitionEnterTimeout: 150,
  speedDialTransitionName: 'md-speed-dial',
  speedDialTransitionEnterTimeout: 450,
  speedDialTransitionLeaveTimeout: 150,
  passiveIconClassName: 'material-icons',
  activeIconClassName: 'material-icons'
};
export default SpeedDial;