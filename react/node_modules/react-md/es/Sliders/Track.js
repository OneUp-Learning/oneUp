var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';

import updateUnit from '../utils/NumberUtils/updateUnit';
import TrackFill from './TrackFill';
import Thumb from './Thumb';
import ThumbMask from './ThumbMask';
import DiscreteValue from './DiscreteValue';

var half = function half(w) {
  return w / 2;
};

/**
 * The `Track` component is used for showing the current state of the slider.
 * It will render the `TrackFill`, `Thumb`, and `ThumbMask` components.
 */

var Track = function (_PureComponent) {
  _inherits(Track, _PureComponent);

  function Track() {
    _classCallCheck(this, Track);

    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
  }

  Track.prototype.render = function render() {
    var _props = this.props,
        on = _props.on,
        off = _props.off,
        active = _props.active,
        disabled = _props.disabled,
        dragging = _props.dragging,
        className = _props.className,
        thumbLeft = _props.thumbLeft,
        trackFillWidth = _props.trackFillWidth,
        trackFillStyle = _props.trackFillStyle,
        trackFillClassName = _props.trackFillClassName,
        discreteValueStyle = _props.discreteValueStyle,
        discreteValueClassName = _props.discreteValueClassName,
        maskInked = _props.maskInked,
        maskLeaving = _props.maskLeaving,
        thumbStyle = _props.thumbStyle,
        thumbClassName = _props.thumbClassName,
        discrete = _props.discrete,
        onThumbFocus = _props.onThumbFocus,
        onThumbKeyUp = _props.onThumbKeyUp,
        onThumbKeyDown = _props.onThumbKeyDown,
        value = _props.value,
        tickWidth = _props.tickWidth,
        discreteTicks = _props.discreteTicks,
        scale = _props.scale,
        step = _props.step,
        valuePrecision = _props.valuePrecision,
        props = _objectWithoutProperties(_props, ['on', 'off', 'active', 'disabled', 'dragging', 'className', 'thumbLeft', 'trackFillWidth', 'trackFillStyle', 'trackFillClassName', 'discreteValueStyle', 'discreteValueClassName', 'maskInked', 'maskLeaving', 'thumbStyle', 'thumbClassName', 'discrete', 'onThumbFocus', 'onThumbKeyUp', 'onThumbKeyDown', 'value', 'tickWidth', 'discreteTicks', 'scale', 'step', 'valuePrecision']);

    var ticks = [];
    if (typeof discreteTicks !== 'undefined' && !disabled && discrete) {
      var amt = scale / (discreteTicks / step);
      var offset = updateUnit(tickWidth, half, 'px');
      var inc = 100 / amt;

      for (var i = 0; i <= amt; i++) {
        var left = i * inc + '%';
        var width = tickWidth;
        if (i === 0 || i === amt) {
          width = updateUnit(tickWidth, half);
        } else {
          left = 'calc(' + left + ' - ' + offset + ')';
        }

        ticks.push(React.createElement('span', {
          key: 'tick-' + i,
          className: 'md-slider-discrete-tick',
          style: { left: left, width: width }
        }));
      }
    }

    return React.createElement(
      'div',
      _extends({}, props, { className: cn('md-slider-track', className) }),
      ticks,
      React.createElement(TrackFill, {
        style: trackFillStyle,
        className: trackFillClassName,
        disabled: disabled,
        dragging: dragging,
        trackFillWidth: trackFillWidth
      }),
      React.createElement(Thumb, {
        style: thumbStyle,
        className: thumbClassName,
        on: on,
        off: off,
        disabled: disabled,
        dragging: dragging,
        active: active,
        thumbLeft: thumbLeft,
        onFocus: onThumbFocus,
        onKeyUp: onThumbKeyUp,
        onKeyDown: onThumbKeyDown,
        discrete: discrete
      }),
      React.createElement(DiscreteValue, {
        style: discreteValueStyle,
        className: discreteValueClassName,
        discrete: discrete,
        dragging: dragging,
        active: active,
        value: value,
        thumbLeft: thumbLeft,
        valuePrecision: valuePrecision
      }),
      React.createElement(ThumbMask, {
        dragging: dragging,
        disabled: disabled,
        thumbLeft: thumbLeft,
        maskInked: maskInked,
        discrete: discrete,
        leaving: maskLeaving
      })
    );
  };

  return Track;
}(PureComponent);

Track.propTypes = {
  style: PropTypes.object,
  className: PropTypes.string,
  thumbStyle: PropTypes.object,
  thumbClassName: PropTypes.string,
  trackFillStyle: PropTypes.object,
  trackFillClassName: PropTypes.string,
  discreteValueStyle: PropTypes.object,
  discreteValueClassName: PropTypes.string,
  on: PropTypes.bool,
  off: PropTypes.bool,
  active: PropTypes.bool,
  dragging: PropTypes.bool,
  disabled: PropTypes.bool,
  thumbLeft: PropTypes.string.isRequired,
  trackFillWidth: PropTypes.string.isRequired,
  value: PropTypes.number.isRequired,
  discrete: PropTypes.bool,
  maskInked: PropTypes.bool,
  maskLeaving: PropTypes.bool,
  onThumbKeyUp: PropTypes.func.isRequired,
  onThumbKeyDown: PropTypes.func.isRequired,
  onThumbFocus: PropTypes.func.isRequired,
  scale: PropTypes.number,
  step: PropTypes.number,
  discreteTicks: PropTypes.number,
  tickWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  valuePrecision: PropTypes.number.isRequired
};
export default Track;