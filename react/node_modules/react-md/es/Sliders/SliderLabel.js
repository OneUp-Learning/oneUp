var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';

import themeColors from '../utils/themeColors';

/**
 * This is just the label component for the slider. It will
 * return null if there are no children to display.
 */

var SliderLabel = function (_PureComponent) {
  _inherits(SliderLabel, _PureComponent);

  function SliderLabel() {
    _classCallCheck(this, SliderLabel);

    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
  }

  SliderLabel.prototype.render = function render() {
    var _props = this.props,
        children = _props.children,
        className = _props.className,
        htmlFor = _props.htmlFor,
        props = _objectWithoutProperties(_props, ['children', 'className', 'htmlFor']);

    if (!children) {
      return null;
    }

    return React.createElement(
      'label',
      _extends({}, props, {
        htmlFor: htmlFor,
        className: cn('md-slider-label', themeColors({ text: true }), className)
      }),
      children
    );
  };

  return SliderLabel;
}(PureComponent);

SliderLabel.propTypes = {
  className: PropTypes.string,
  children: PropTypes.node,
  htmlFor: function htmlFor(props, propName, component) {
    for (var _len = arguments.length, others = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
      others[_key - 3] = arguments[_key];
    }

    var _PropTypes$string;

    if (typeof props.children === 'undefined') {
      return null;
    }

    return (_PropTypes$string = PropTypes.string).isRequired.apply(_PropTypes$string, [props, propName, component].concat(others));
  }
};
export default SliderLabel;