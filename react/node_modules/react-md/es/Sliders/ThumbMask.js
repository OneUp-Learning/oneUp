var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';

/**
 * The `ThumbMask` component is used for either:
 *
 *  - rendering the ink behind the `Thumb` component when the `Thumb`
 *  has keyboard focus or touch focus
 *  - rendering a underlay to make the `Track` look broken for disabled
 *  Sliders.
 */

var ThumbMask = function (_PureComponent) {
  _inherits(ThumbMask, _PureComponent);

  function ThumbMask() {
    _classCallCheck(this, ThumbMask);

    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
  }

  ThumbMask.prototype.render = function render() {
    var _props = this.props,
        style = _props.style,
        className = _props.className,
        thumbLeft = _props.thumbLeft,
        disabled = _props.disabled,
        dragging = _props.dragging,
        maskInked = _props.maskInked,
        discrete = _props.discrete,
        leaving = _props.leaving,
        props = _objectWithoutProperties(_props, ['style', 'className', 'thumbLeft', 'disabled', 'dragging', 'maskInked', 'discrete', 'leaving']);

    return React.createElement('span', _extends({}, props, {
      style: Object.assign({}, style, { left: thumbLeft }),
      className: cn('md-slider-thumb md-slider-thumb--mask', className, {
        'md-slider-thumb--dragging': dragging,
        'md-slider-thumb--mask-inked': maskInked,
        'md-slider-thumb--mask-disabled': disabled,
        'md-slider-thumb--discrete-mask-inked': maskInked && discrete,
        'md-slider-thumb--discrete-mask-leaving': discrete && leaving
      })
    }));
  };

  return ThumbMask;
}(PureComponent);

ThumbMask.propTypes = {
  style: PropTypes.object,
  className: PropTypes.string,
  disabled: PropTypes.bool,
  thumbLeft: PropTypes.string.isRequired,
  maskInked: PropTypes.bool,
  dragging: PropTypes.bool,
  discrete: PropTypes.bool,
  leaving: PropTypes.bool
};
export default ThumbMask;