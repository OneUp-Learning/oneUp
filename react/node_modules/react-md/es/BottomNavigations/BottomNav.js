var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent, Children, isValidElement, cloneElement } from 'react';
import PropTypes from 'prop-types';
import cn from 'classnames';

import themeColors from '../utils/themeColors';
import AccessibleFakeInkedButton from '../Helpers/AccessibleFakeInkedButton';
import Collapse from '../Helpers/Collapse';
import FontIcon from '../FontIcons';

/**
 * The `BottomNav` component is used for rendering the navigation tab/link in the `BottomNavigation`
 * component.
 */

var BottomNav = function (_PureComponent) {
  _inherits(BottomNav, _PureComponent);

  function BottomNav() {
    var _temp, _this, _ret;

    _classCallCheck(this, BottomNav);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _PureComponent.call.apply(_PureComponent, [this].concat(args))), _this), _this._handleClick = function (e) {
      var _this$props = _this.props,
          onClick = _this$props.onClick,
          onNavChange = _this$props.onNavChange,
          index = _this$props.index;

      if (onClick) {
        onClick(index, e);
      }

      if (onNavChange) {
        onNavChange(index, e);
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  BottomNav.prototype.render = function render() {
    var _props = this.props,
        active = _props.active,
        fixed = _props.fixed,
        className = _props.className,
        colored = _props.colored,
        animate = _props.animate,
        iconClassName = _props.iconClassName,
        iconChildren = _props.iconChildren,
        index = _props.index,
        propIcon = _props.icon,
        propLabel = _props.label,
        onClick = _props.onClick,
        onNavChange = _props.onNavChange,
        props = _objectWithoutProperties(_props, ['active', 'fixed', 'className', 'colored', 'animate', 'iconClassName', 'iconChildren', 'index', 'icon', 'label', 'onClick', 'onNavChange']);

    var _props2 = this.props,
        label = _props2.label,
        icon = _props2.icon;

    var labelClassName = cn('md-bottom-nav-label', { 'md-bottom-nav-label--shifting-inactive': !active && !fixed });
    if (Children.count(label) === 1 && isValidElement(label)) {
      var labelEl = Children.only(label);
      label = cloneElement(label, {
        className: cn(labelClassName, labelEl.props.className)
      });
    } else {
      label = React.createElement(
        'div',
        { className: labelClassName },
        label
      );
    }

    if (!icon && (iconClassName || iconChildren)) {
      // Deprecated
      icon = React.createElement(
        FontIcon,
        { iconClassName: iconClassName, inherit: true },
        iconChildren
      );
    } else if (icon) {
      icon = React.cloneElement(icon, { inherit: true });
    }

    return React.createElement(
      AccessibleFakeInkedButton,
      _extends({}, props, {
        onClick: this._handleClick,
        className: cn('md-bottom-nav', {
          'md-bottom-nav--active': active,
          'md-bottom-nav--fixed': fixed,
          'md-bottom-nav--shifting': !fixed,
          'md-bottom-nav--shifting-active': !fixed && active,
          'md-bottom-nav--shifting-inactive': !fixed && !active
        }, themeColors({ primary: !colored && active, text: !active && !colored }, className))
      }),
      icon,
      React.createElement(
        Collapse,
        { collapsed: !fixed && !active, animate: animate },
        label
      )
    );
  };

  return BottomNav;
}(PureComponent);

BottomNav.propTypes = {
  style: PropTypes.object,
  className: PropTypes.string,
  component: PropTypes.oneOfType([PropTypes.func, PropTypes.string, PropTypes.object]),
  active: PropTypes.bool,
  fixed: PropTypes.bool,
  children: PropTypes.node,
  index: PropTypes.number.isRequired,
  label: PropTypes.node.isRequired,
  colored: PropTypes.bool,
  iconChildren: PropTypes.node,
  iconClassName: PropTypes.string,
  onClick: PropTypes.func,
  onNavChange: PropTypes.func,
  role: PropTypes.string,
  animate: PropTypes.bool,
  icon: PropTypes.element
};
BottomNav.defaultProps = {
  component: 'a',
  role: null
};
export default BottomNav;