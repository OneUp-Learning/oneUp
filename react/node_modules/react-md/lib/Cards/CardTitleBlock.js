'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _themeColors = require('../utils/themeColors');

var _themeColors2 = _interopRequireDefault(_themeColors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CardTitleBlock = function (_PureComponent) {
  _inherits(CardTitleBlock, _PureComponent);

  function CardTitleBlock() {
    _classCallCheck(this, CardTitleBlock);

    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
  }

  CardTitleBlock.prototype.render = function render() {
    var _props = this.props,
        id = _props.id,
        subtitle = _props.subtitle,
        avatar = _props.avatar;
    var title = this.props.title;

    title = _react2.default.createElement(
      'h2',
      {
        id: id,
        className: (0, _classnames2.default)('md-card-title--title', {
          'md-card-title--large': !avatar
        }, (0, _themeColors2.default)({ text: true })),
        tabIndex: id ? -1 : null
      },
      title
    );

    if (!subtitle) {
      return title;
    }

    return _react2.default.createElement(
      'div',
      {
        className: (0, _classnames2.default)('md-card-title--title-block', {
          'md-card-title--one-line': avatar
        })
      },
      title,
      _react2.default.createElement(
        'h3',
        { className: 'md-card-title--title ' + (0, _themeColors2.default)({ hint: true }) },
        subtitle
      )
    );
  };

  return CardTitleBlock;
}(_react.PureComponent);

CardTitleBlock.propTypes = {
  id: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
  title: _propTypes2.default.node.isRequired,
  subtitle: _propTypes2.default.node,
  avatar: _propTypes2.default.bool
};
exports.default = CardTitleBlock;