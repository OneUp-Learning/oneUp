'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _AccessibleFakeButton = require('../Helpers/AccessibleFakeButton');

var _AccessibleFakeButton2 = _interopRequireDefault(_AccessibleFakeButton);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The `Thumb` component is the little ball for the slider.
 */
var Thumb = function (_PureComponent) {
  _inherits(Thumb, _PureComponent);

  function Thumb() {
    _classCallCheck(this, Thumb);

    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
  }

  Thumb.prototype.render = function render() {
    var _props = this.props,
        style = _props.style,
        className = _props.className,
        on = _props.on,
        off = _props.off,
        active = _props.active,
        disabled = _props.disabled,
        dragging = _props.dragging,
        thumbLeft = _props.thumbLeft,
        discrete = _props.discrete,
        props = _objectWithoutProperties(_props, ['style', 'className', 'on', 'off', 'active', 'disabled', 'dragging', 'thumbLeft', 'discrete']);

    return _react2.default.createElement(_AccessibleFakeButton2.default, _extends({
      disabled: disabled
    }, props, {
      style: Object.assign({}, style, { left: thumbLeft }),
      className: (0, _classnames2.default)('md-slider-thumb', className, {
        'md-slider-thumb--active': active,
        'md-slider-thumb--dragging': dragging,
        'md-slider-thumb--disabled': disabled,
        'md-slider-thumb--on': on,
        'md-slider-thumb--continuous-off': !discrete && off,
        'md-slider-thumb--discrete': discrete,
        'md-slider-thumb--discrete-on': discrete && active && on,
        'md-slider-thumb--discrete-off': discrete && !disabled && off,
        'md-slider-thumb--discrete-active': discrete && active,
        'md-slider-thumb--discrete-active-off': discrete && active && off
      })
    }));
  };

  return Thumb;
}(_react.PureComponent);

Thumb.propTypes = {
  style: _propTypes2.default.object,
  className: _propTypes2.default.string,
  thumbLeft: _propTypes2.default.string.isRequired,
  on: _propTypes2.default.bool,
  off: _propTypes2.default.bool,
  active: _propTypes2.default.bool,
  disabled: _propTypes2.default.bool,
  dragging: _propTypes2.default.bool,
  discrete: _propTypes2.default.bool
};
exports.default = Thumb;