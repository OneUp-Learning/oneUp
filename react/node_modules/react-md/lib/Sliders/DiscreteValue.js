'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DiscreteValue = function (_PureComponent) {
  _inherits(DiscreteValue, _PureComponent);

  function DiscreteValue() {
    _classCallCheck(this, DiscreteValue);

    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
  }

  DiscreteValue.prototype.render = function render() {
    var _props = this.props,
        style = _props.style,
        className = _props.className,
        discrete = _props.discrete,
        dragging = _props.dragging,
        thumbLeft = _props.thumbLeft,
        active = _props.active,
        value = _props.value,
        valuePrecision = _props.valuePrecision,
        props = _objectWithoutProperties(_props, ['style', 'className', 'discrete', 'dragging', 'thumbLeft', 'active', 'value', 'valuePrecision']);

    if (!discrete || !active) {
      return null;
    }

    var valueStr = value.toFixed(valuePrecision);
    if (valuePrecision > 0) {
      var _valueStr$split = valueStr.split('.'),
          w = _valueStr$split[0],
          d = _valueStr$split[1];

      if (parseInt(d, 10) === 0) {
        valueStr = w;
      }
    }
    return _react2.default.createElement(
      'span',
      _extends({}, props, {
        style: Object.assign({}, style, { left: thumbLeft }),
        className: (0, _classnames2.default)('md-slider-discrete-value', className, {
          'md-slider-discrete-value--dragging': dragging
        })
      }),
      valueStr
    );
  };

  return DiscreteValue;
}(_react.PureComponent);

DiscreteValue.propTypes = {
  style: _propTypes2.default.object,
  className: _propTypes2.default.string,
  discrete: _propTypes2.default.bool,
  dragging: _propTypes2.default.bool,
  active: _propTypes2.default.bool,
  value: _propTypes2.default.number.isRequired,
  thumbLeft: _propTypes2.default.string.isRequired,
  valuePrecision: _propTypes2.default.number.isRequired
};
exports.default = DiscreteValue;