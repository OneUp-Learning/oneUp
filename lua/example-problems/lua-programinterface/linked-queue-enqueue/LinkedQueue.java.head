/**
   A class that implements the ADT queue by using a chain of nodes
   that has both head and tail references.
   
   @author Frank M. Carrano
   @version 3.0
*/
public class LinkedQueue<T> implements QueueInterface<T>
{
  private Node firstNode; // references node at front of queue
  private Node lastNode;  // references node at back of queue
  	
	public LinkedQueue()
	{
		firstNode = null;
		lastNode = null;
	} // end default constructor

	public T getFront()
	{
		T front = null;
		
		if (!isEmpty())
			front = firstNode.getData();
		
		return front;
	} // end getFront

	public T dequeue()
	{
		T front = null;
		
		if (!isEmpty())
		{
			front = firstNode.getData();
			firstNode = firstNode.getNextNode();
			
			if (firstNode == null)
				lastNode = null;
		} // end if
		
		return front;
	} // end dequeue
		
	public boolean isEmpty()
	{
		return (firstNode == null) && (lastNode == null);
	} // end isEmpty
	
	public void clear()
	{
		firstNode = null;	
		lastNode = null;
	} // end clear
	
	public String toString() {
		String s = "Queue nodes: {";
		Node ref = firstNode;
		
		while (ref != lastNode) {
			s = s + ref.data + ", ";
			ref = ref.next;
		}
		s = s + ref.data + "}";
		//s = s.substring(0, s.lastIndexOf(',') - 1);
		return s;
	}

	private class Node
	{
		private T    data; // entry in queue
		private Node next; // link to next node

		private Node(T dataPortion)
		{
			data = dataPortion;
			next = null;	
		} // end constructor
		
		private Node(T dataPortion, Node linkPortion)
		{
			data = dataPortion;
			next = linkPortion;	
		} // end constructor

		private T getData()
		{
			return data;
		} // end getData

		private void setData(T newData)
		{
			data = newData;
		} // end setData

		private Node getNextNode()
		{
			return next;
		} // end getNextNode
		
		private void setNextNode(Node nextNode)
		{
			next = nextNode;
		} // end setNextNode
	} // end Node
	
	// Write a method that will return the size of the queue
	public void enqueue(T newEntry) {
	
