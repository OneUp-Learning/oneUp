
/**
A class of bags whose entries are stored in a fixed-size array.
@author Frank M. Carrano
 * 
 * The toString method is overwritten to give a nice display of the items in
 * the bag in this format Bag{Size:# <1> <2> <3> <4> }
 * //- * @version 3.0
 */
public class ArrayBag<T> implements BagInterface<T> {

    private final T[] bag;
    private static final int DEFAULT_CAPACITY = 25;
    private int numberOfEntries;

    /** Creates an empty bag whose initial capacity is 25. */
    public ArrayBag() {
        this(DEFAULT_CAPACITY);
    } // end default constructor

    /** Creates an empty bag having a given initial capacity.
    @param capacity the integer capacity desired */
    public ArrayBag(int capacity) {
        numberOfEntries = 0;

        // the cast is safe because the new array contains null entries
        @SuppressWarnings("unchecked")
        T[] tempBag = (T[]) new Object[capacity]; // unchecked cast
        bag = tempBag;
    } // end constructor

    /** Adds a new entry to this bag.
    @param newEntry the object to be added as a new entry
    @return true if the addition is successful, or false if not */
    public boolean add(T newEntry) {
        boolean result = true;
        if (isFull()) {
            result = false;
        } else { // assertion: result is true here
            bag[numberOfEntries] = newEntry;
            numberOfEntries++;
        } // end if
        return result;
    } // end add

    /** Retrieves all entries that are in this bag.
    @return a newly allocated array of all the entries in the bag */
    public T[] toArray() {

        // the cast is safe because the new array contains null entries
        @SuppressWarnings("unchecked")
        T[] result = (T[]) new Object[numberOfEntries]; // unchecked cast
        for (int index = 0; index < numberOfEntries; index++) {
            result[index] = bag[index];
        } // end for
        return result;
    } // end toArray

    /** Sees whether this bag is full.
    @return true if the bag is full, or false if not */
    public boolean isFull() {
        return numberOfEntries == bag.length;
    } // end isFull

    /** Sees whether this bag is empty.
    @return true if the bag is empty, or false if not */
    public boolean isEmpty() {
        return numberOfEntries == 0;
    } // end isEmpty

    /** Gets the current number of entries in this bag.
    @return the integer number of entries currently in the bag */
    public int getCurrentSize() {
        return numberOfEntries;
    } // end getCurrentSize

    /** Counts the number of times a given entry appears in this bag.
    @param anEntry the entry to be counted
    @return the number of times anEntry appears in the bag */
    public int getFrequencyOf(T anEntry) {
        int counter = 0;
        for (int index = 0; index < numberOfEntries; index++) {
            if (anEntry.equals(bag[index])) {
                counter++;
            } // end if
        } // end for
        return counter;
    } // end getFrequencyOf

    /** Tests whether this bag contains a given entry.
    @param anEntry the entry to locate
    @return true if the bag contains anEntry, or false otherwise */
    public boolean contains(T anEntry) {
        return getIndexOf(anEntry) > -1;
    } // end contains

    /** Removes all entries from this bag. */
    public void clear() {
        while (!isEmpty()) {
            remove();
        }
    } // end clear

    /** Removes one unspecified entry from this bag, if possible.
    @return either the removed entry, if the removal was successful,
    or null otherwise */
    public T remove() {
        T result = null;

         if (numberOfEntries > 0) {
            numberOfEntries--;
            result = bag[numberOfEntries];
            bag[numberOfEntries] = null;
        } // end if


        return result;
    } // end remove

    /** Removes one occurrence of a given entry from this bag.
    @param anEntry the entry to be removed
    @return true if the removal was successful, or false if not */
    public boolean remove(T anEntry) {
        int index = getIndexOf(anEntry);
        T result = removeEntry(index);
        return anEntry.equals(result);
    } // end remove

// Removes and returns the entry at a given index within the arraybag.
// If no such entry exists, returns null.
    private T removeEntry(int givenIndex) {
        T result = null;
        if (!isEmpty() && (givenIndex >= 0)) {
            result = bag[givenIndex]; // entry to remove
            numberOfEntries--;
            bag[givenIndex] = bag[numberOfEntries]; // replace entry with last entry
            bag[numberOfEntries] = null; // remove last entry
        } // end if
        return result;
    } // end removeEntry

// Locates a given entry within the array bag.
// Returns the index of the entry, if located, or -1 otherwise.
    private int getIndexOf(T anEntry) {
        int where = -1;
        boolean found = false;
        for (int index = 0; !found && (index < numberOfEntries); index++) {
            if (anEntry.equals(bag[index])) {
                found = true;
                where = index;
            } // end if
        } // end for
// Assertion: If where > -1, anEntry is in the array bag, and it
// equals bag[where]; otherwise, anEntry is not in the array
        return where;
    } // end getIndexOf

    /** Override the equals method so that we can tell if two bags contain the same items
     * the contents in the bag.
     * @return a string representation of the contents of the bag */
    public String toString() {

        String result = "Bag{Size:" + numberOfEntries + " ";
        

        for (int index = 0; index < numberOfEntries; index++) {
            result += "<" + bag[index] + "> ";
        } // end for

        result += "}";
        return result;
    } // end toArray

    /*********************************************************************
     * 
     * METHODS TO BE COMPLETED
     * 
    
     * 
     ************************************************************************/

    /** Check to see if two bags are equals.  
     * @param aBag another object to check this bag against
     * @return true the two bags contain the same objects with the same frequencies
     */
    public boolean equals(ArrayBag<T> aBag) {
        boolean result = false; // result of comparison of bags

        // COMPLETE THIS METHOD 
        //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        // This solution is not the most efficient as it involves multiple
        // scans of both bags.  A more efficient way to solve this problem
        // is to use an efficient sort and then do a linear comparison of the
        // two bags.  Conceptually it is cleaner as well since we don't have
        // to worry about duplicates explicitly.


        int position;  // want position available throughout method


        if (numberOfEntries == aBag.getCurrentSize()) {
            // Provisionally these are the same
            result = true;

            // the bags have equal sizes, so see if all items are present with the right frequencies
            for (position = 0; (position < numberOfEntries); position++) {
                // Get the frequency of the item in this bag
                int countInThisBag = getFrequencyOf(bag[position]);

                int countInOtherBag = aBag.getFrequencyOf(bag[position]);

                if (countInThisBag != countInOtherBag) {
                    result = false;
                }
            }  // end for

        }
        //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

        return result;
    }  // end equals
    

   	public static void main(String[] args) { 
	    ArrayBag<String> testBag1 = new ArrayBag<String>();
	    ArrayBag<String> testBag2 = new ArrayBag<String>();
	    ArrayBag<String> testBag3 = new ArrayBag<String>();
	    ArrayBag<String> testBag4 = new ArrayBag<String>(50);
	    ArrayBag<String> testBag5 = new ArrayBag<String>(50);
	    
		// Initializing the bags
	    // Empty bags
        testBag1.clear();
        testBag2.clear();

        // A bag with a single item
        testBag3.clear();
        testBag3.add("A");

        // A bag with "A" duplicated
		String[] b4 = {"A", "C", "D", "A", "Z", "A"};
        testBag4.clear();
		for(int i=0; i<b4.length; i++)
			testBag4.add(b4[i]);
       
        // The previous bag with all duplicates of "A" removed
		String[] b5 = {"C", "D", "Z"};		
		for(int i=0; i<b5.length; i++)
			testBag5.add(b5[i]);

		// Testing Part
		if ("test1".equals(args[0])) {
		    runTest1(testBag1, testBag2, testBag3, testBag4, testBag5);
		} else if ("test2".equals(args[0])) {
		    runTest2(testBag1, testBag2, testBag3, testBag4, testBag5);
		} else {
		    runTest3(testBag1, testBag2, testBag3, testBag4, testBag5);
		}
	}
	
	// Check that it works on an empty bag
   	public static void runTest1(ArrayBag<String> testBag1, ArrayBag<String> testBag2, ArrayBag<String> testBag3, ArrayBag<String> testBag4, ArrayBag<String> testBag5) {	
	       
		// System.out.println("Checking to see that we can remove duplicates on an empty bag and still have an empty bag");
        testBag1.removeAllEntriesOf("A");
        if (testBag1.equals(testBag2)) {
            System.out.println("Success");
            System.out.println(3);
        } else {
            System.out.println("*** Failed test");
        }
    }
 		
    // Check that it works on a bag with a single item
  	public static void runTest2(ArrayBag<String> testBag1, ArrayBag<String> testBag2, ArrayBag<String> testBag3, ArrayBag<String> testBag4, ArrayBag<String> testBag5) {	
    
        // System.out.println("Checking to see that we can remove the item in a singleton bag and get an empty bag");
        testBag3.removeAllEntriesOf("A");
        if (testBag3.isEmpty()) {
            System.out.println("Success");
            System.out.println(3);
        } else {
            System.out.println("*** Failed test");

        }
	}
 
    // Check that it works on a bag with multiple copies of the item "A"
  	public static void runTest3(ArrayBag<String> testBag1, ArrayBag<String> testBag2, ArrayBag<String> testBag3, ArrayBag<String> testBag4, ArrayBag<String> testBag5) {	
    
        //System.out.println("Checking to see that the method works on a bag with multiple copies of the item \"A\"");
        
        testBag4.removeAllEntriesOf("A");
        if (testBag4.equals(testBag5)) {
            System.out.println("Success");
            System.out.println(4);
        } else {
            System.out.println("*** Failed test");
        }
       	System.out.println();
    }			    
	 
    
      /** Removes all occurrences of a given entry from this bag.
    @param anEntry the entry to be removed
    @return true if the removal was successful, or false if not */
    
    public boolean removeAllEntriesOf(T anEntry){

