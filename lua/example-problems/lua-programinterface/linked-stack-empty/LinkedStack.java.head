
/**
   A class of stacks whose entries are stored in a chain of nodes.
   
   @author Frank M. Carrano
   @version 3.0
*/
public class LinkedStack<T> 
{
	private Node topNode; // references the first node in the chain
	
	public LinkedStack()
	{
		topNode = null;
	} // end default constructor
	
	public void push(T newEntry)
	{
		Node newNode = new Node(newEntry, topNode);
		topNode = newNode;
	} // end push

	public T peek()
	{
		T top = null;
		
		if (topNode != null)
			top = topNode.getData();
		
		return top;
	} // end peek

	public T pop()
	{
	   T top = peek();
	  
	   if (topNode != null)
	      topNode = topNode.getNextNode(); 

	   return top;
	} // end pop

/*
// does not call peek (Question 1, Chapter 6)
	public T pop()
	{
		T top = null;
		
		if (topNode != null)
		{
			top = topNode.getData();   
			topNode = topNode.getNextNode();
		} // end if
		
		return top;
	} // end pop
*/		
	
	public void clear()
	{
		topNode = null;	
	} // end clear

	private class Node
	{
      private T    data; // entry in stack
      private Node next; // link to next node

      private Node(T dataPortion)
      {
         data = dataPortion;
         next = null;	
      } // end constructor

      private Node(T dataPortion, Node linkPortion)
      {
         data = dataPortion;
         next = linkPortion;	
      } // end constructor

      private T getData()
      {
         return data;
      } // end getData

      private void setData(T newData)
      {
         data = newData;
      } // end setData

      private Node getNextNode()
      {
         return next;
      } // end getNextNode

      private void setNextNode(Node nextNode)
      {
         next = nextNode;
      } // end setNextNode
	} // end Node
	
	public void display() {
		
		String s = "";
		Node temp = topNode;  // to trace the chain
		int count = 0;
		while (!(temp == null)){
			s = s +temp.data + ", ";
			temp = temp.next;
			count++;
		}
		
		System.out.println("Stack: size = " + count + "; Elements from the Top down: " +s);
		
	}
	
	public String toString() {
		
		String s = "";
		Node temp = topNode;  // to trace the chain
		int count = 0;
		while (!(temp == null)){
			s = s +temp.data + ", ";
			temp = temp.next;
			count++;
		}
		
		return "Stack: size = " + count + "; Elements from the Top down: " +s;
		
	}
	
	//Checks if a stack is empty
	 public boolean isEmpty() {