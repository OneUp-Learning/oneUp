/**
   A class that implements the ADT queue by using a chain of nodes
   that has both head and tail references.
   
   @author Frank M. Carrano
   @version 3.0
*/
public class LinkedQueue<T> 
{
  private Node firstNode; // references node at front of queue
  private Node lastNode;  // references node at back of queue
  	
	public LinkedQueue()
	{
		firstNode = null;
		lastNode = null;
	} // end default constructor
	
	public void enqueue(T newEntry)
	{
		Node newNode = new Node(newEntry, null);
		
		if (isEmpty())
			firstNode = newNode;
		else
			lastNode.setNextNode(newNode);

		lastNode = newNode;
	} // end enqueue

	public T getFront()
	{
		T front = null;
		
		if (!isEmpty())
			front = firstNode.getData();
		
		return front;
	} // end getFront

	public T dequeue()
	{
		T front = null;
		
		if (!isEmpty())
		{
			front = firstNode.getData();
			firstNode = firstNode.getNextNode();
			
			if (firstNode == null)
				lastNode = null;
		} // end if
		
		return front;
	} // end dequeue
		
	public boolean isEmpty()
	{
		return (firstNode == null) && (lastNode == null);
	} // end isEmpty
	
	public void clear()
	{
		firstNode = null;	
		lastNode = null;
	} // end clear
	
	public String toString() {
		String s = "Queue nodes: {";
		Node ref = firstNode;
		
		while (ref != lastNode) {
			s = s + ref.data + ", ";
			ref = ref.next;
		}
		s = s + ref.data + "}";
		//s = s.substring(0, s.lastIndexOf(',') - 1);
		return s;
	}
	
	public int size()
	{
		int size = 0;
		
		Node currentNode = firstNode; 
		while (currentNode != null){
			size++;
			currentNode = currentNode.next;
		}		
		return size;
	} // end size	
	
	/** Check to see if two queues are the same.  
	 * @param aQueue another linked queue to check this queue against
	 * @return true if all the items in this queue and the other queue are equals
	 */

    public boolean equals(LinkedQueue<T> aQueue) {
        boolean isEqual = false; // result of comparison of lists

        Node currOne = firstNode;
        Node currTwo = aQueue.firstNode;
        int counter;

        if (size() == aQueue.size()) {
            // lists have equal lengths, so traverse both and compare items as you go:
            // (NOTE: loop is skipped if lists are empty)

            while ((currOne != null) && (currOne.getData()).equals(currTwo.getData())) {
                currOne = currOne.getNextNode();
                currTwo = currTwo.getNextNode();
            } // end while

            isEqual = currOne == null;
        } else // lists have unequal lengths
        {
            isEqual = false;
        }

        return isEqual;
    } // end equals

	    
	

	private class Node
	{
		private T    data; // entry in queue
		private Node next; // link to next node

		private Node(T dataPortion)
		{
			data = dataPortion;
			next = null;	
		} // end constructor
		
		private Node(T dataPortion, Node linkPortion)
		{
			data = dataPortion;
			next = linkPortion;	
		} // end constructor

		private T getData()
		{
			return data;
		} // end getData

		private void setData(T newData)
		{
			data = newData;
		} // end setData

		private Node getNextNode()
		{
			return next;
		} // end getNextNode
		
		private void setNextNode(Node nextNode)
		{
			next = nextNode;
		} // end setNextNode
	} // end Node
	
	// Add all items in queue2 to the end of the queue on which the method is applied.
	// The firstNode of the first chain will be the firstNode of the result
	// The lastNode of the second chain will be the last node of the result

	public LinkedQueue<T> splice(LinkedQueue<T> queue2) {
